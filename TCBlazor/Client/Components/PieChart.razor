<table>
    <tr><td style="width: 160px; height: 160px; padding: 5px; vertical-align: top;">
    <div style="
        border-radius: 100%;
        width: 100%;
        aspect-ratio: 1;
        background: conic-gradient(@(string.Join(", ", 
                GetFromTo(AnglesColorsAndNames.Select(acn => acn.Item1)) // (0, 8), (8, 17), (17, 95) ...
                .Zip(AnglesColorsAndNames)
                .Select(acn => new {Color=acn.Second.Item2, FromDeg=acn.First.Item1, ToDeg=acn.First.Item2})
                .Select(acn => $"{acn.Color} {acn.FromDeg}deg {acn.ToDeg}deg")))
            );
    "></div>

</td>
<td style="padding: 5px; font-size: x-small; vertical-align:top;">
@foreach (var acn in AnglesColorsAndNames)
{
  var nm = acn.Item3;
  var color = acn.Item2;
  var perc = acn.Item1 * 100.0 / 360;
  <div>
        <span style="width:7px;background-color:@color">&nbsp;&nbsp;&nbsp;</span><b>&nbsp;@nm</b> @($"{perc:0.0}%")
  </div>
}
@{/*
            <Slider TValue="double" Min="1" Max="5" Step="0.001" @bind-Value="@multiplier" OnChange=@(d => {UpdateColors(); StateHasChanged();}) />
            <AntDesign.InputNumber Min="1" Max="5" Step="0.001" Style="margin:0 16px;" @bind-Value="@multiplier" 
            TValue="double"
                OnChange=@(() => {UpdateColors(); StateHasChanged();}) />
*/}
</td>
</tr>
</table>
@code {
    [Parameter]
    public IEnumerable<(string name, int amount)> Data { get; set; } = new List<(string, int)>()
        {
            ("one", 200),
            ("two", 200),
        };
    private List<(int, string, string)> AnglesColorsAndNames { get; set; } = new();
    protected override void OnParametersSet()
    {
        UpdateColors();
    }
    private void UpdateColors()
    {
        AnglesColorsAndNames = GetAnglesColorsAndNames().ToList();
    }
    private string[] colors = new[]
    {
        "royalblue",
        "red",
        "lightgreen",
        "yellow",
        "green",
        "orange",
        "indigo",
        "pink",
        "cyan",
        "lightyellow",
        "PaleGreen",
        "lightblue",
        "magenta",
        "lightgrey",
        "MediumOrchid",
        "lightcyan",
        "maroon",
        "MediumAquaMarine",
        "Olive",
        "PowderBlue",
        "Aquamarine",
        "violet"
    };
    (byte r, byte g, byte b) startColor = (0x35, 0x66, 0xee);
    
//    (byte r, byte g, byte b) startColor = (240, 2, 158);
    private IEnumerable<string> Colors()
    {
        int i = 0;
        (byte r, byte g, byte b) c = startColor;
        while (i < 10000)
        {
            yield return $"rgb({c.r},{c.g},{c.b})";
            c = nextColor(c);
            i++;
        }
    }
    private double multiplier = 1.641;
    private (byte r, byte g, byte b) nextColor((byte r, byte g, byte b) c)
    {
        int colorN = BitConverter.ToInt32(new byte[] { c.b, c.g, c.r, 0 });
        //Console.WriteLine($"c: {colorN} (shift: {shift})");
        colorN = (int)(colorN * multiplier);
        //Console.WriteLine($"c shifted: {colorN}");
        var bytes = BitConverter.GetBytes(colorN);
        return (bytes[2], bytes[1], bytes[0]);
    }
    public IEnumerable<(int, int)> GetFromTo(IEnumerable<int> seq)
    {
        int i = 0;
        foreach (var s in seq)
        {
            yield return (i, i + s);
            i = i + s;
        }
    }
    private IEnumerable<(int, string, string)> GetAnglesColorsAndNames()
    {
        var total = Data.Select(i => i.amount).Sum();
        //Console.WriteLine($"total: {total}");
        var a = Data
            .Select(i => (int)((i.amount * 360 / total)))
            .ToList();
        if (a.Sum() < 360)
        {
            a[a.IndexOf(a.Max())] = a.Max() + (360 - a.Sum());
        }
        
        var res = a
        .Zip(Data.Select(i => i.name))
        .OrderByDescending(i => i.First)
        .Zip(Colors().Take(a.Count()))
        .Select(i => (i.First.First, i.Second, i.First.Second)) // (angle, color, name)
        ;
        //Console.WriteLine($"ac: {string.Join(",", res.Select(ac => $"a: {ac.First} c: {ac.Item2} n: {ac.Item3}"))}");
        return res;
    }
}
