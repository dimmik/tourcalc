@using TCalcCore.Engine
@inject TourcalcEngine engine

@using TCalcCore.Network
@inject ITCDataService dataSvc

<span style="cursor:pointer; border:solid 1px black" @onclick=@(() => open=true)>Vv</span>

@if (open)
{
    if (verTask == null) {
          verTask = GetVersions();
    }
    <Modal Title="@($"Versions of tour {Tour?.Name ?? "n/a"}")"
       Visible="@open"
       Footer=@(footer(() => open = false))
       OnOk=@(() => open = false)
       OnCancel=@(() => open = false)
       DestroyOnClose=@true
       Closable=@true>
            @if (versions == null)
            {
                <span>Loading versions...</span>
            }
       <TableTemplate
           Items=@(versions?.Tours)
           Context="t"
           >
           <TableHeader>
               <th>
                   Change Highlight
               </th>
               <th>
                   *
               </th>
           </TableHeader>
           <RowTemplate>
                <td>
                    @(t.Item2). @t.Item1.VersionComment
                </td>
                <td>
                    Restore as tour...
                </td>
            </RowTemplate>
            <NoDataRowTemplate><td colspan="2">No Data</td></NoDataRowTemplate>
        </TableTemplate>
    </Modal>
}

@code {
    bool open = false;
    [Parameter]
    public Tour? Tour { get; set; } = new();

    TourList? versions = null;
    Task? verTask = null;

    private async Task GetVersions()
    {
        versions = await dataSvc.GetTourVersions(Tour);
        StateHasChanged();
    }


    private RenderFragment footer(Action onOk)
    {
        return __builder =>
        {
            <Template>
                    <Button OnClick=@((e) => onOk())
                    Type="primary">
                         Got It
                    </Button>
            </Template>
        };
    }

}
