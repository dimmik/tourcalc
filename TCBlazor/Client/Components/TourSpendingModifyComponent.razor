@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager
<div style="text-align: center; width: 100%;">
    <div
        style="margin-left: auto; margin-right: auto;text-align:left; width: clamp(300px, 40vw, 500px); background-color: #e6ffff; padding: 5px; border-radius: 5px; border: 1px solid black;"
    >
<table style="width: 100%">
    <thead>
        <tr><th colspan="2" style="text-align: center">@TitleText</th></tr>
    </thead>
        <tr>
            <td>Description:</td>
            <td>
                <Input @bind-Value=@(TheSpending.Description)/>
            </td>
        </tr>
        <tr>
            <td>Amount:</td>
            <td>
            <Input @bind-Value=@(TheSpending.AmountInCents) Type="number"/>
            </td>
         </tr>

        <tr>
            <td>Category:</td>
            <td>
            <Select
                @bind-Value=@(TheSpending.Type)
                TItemValue="string"
		        TItem="string"
                AllowClear=@true
                DropdownRender=@CategoryDropdownRenderer
                DataSource="SpendingCategories"
                IgnoreItemChanges="false"
                />
            </td>
        </tr>
        <tr>
            <td>From:</td>
            <td>

            <Select
                OnSelectedItemChanged="OnFromSelectedChangedHandler"
                @bind-Value=@(TheSpending.FromGuid)
                TItemValue="string"
		        TItem="string"
                Placeholder="From"
                DefaultActiveFirstItem="false" 
                AllowClear=@true
            >
                    <SelectOptions>
			            @foreach(var p in TourPersons())
			            {
				            <SelectOption TItemValue="string" TItem="string" Value=@p.GUID Label=@PersonLabel(p) />
			            }
		            </SelectOptions>
            </Select>
            </td>
        </tr>
        <tr>
            <td>To All:</td>
            <td>

            <Switch @bind-Value=@(TheSpending.ToAll)></Switch>
            </td>
        </tr>
        <tr>
            <td>To:</td>
            <td>
            <Select Mode="multiple"
                Placeholder="To..."
		        @bind-Values="@_selectedValuesTo"
		        TItemValue="string"
		        TItem="string"
                OnSelectedItemsChanged="OnToPersonsChangedHandler"
                Disabled=@(TheSpending.ToAll)
		        AllowClear>
		            <SelectOptions>
			            @foreach(var p in TourPersons())
			            {
				            <SelectOption TItemValue="string" TItem="string" Value=@p.GUID Label=@PersonLabel(p) />
			            }
		            </SelectOptions>
            </Select>
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <div style="display: table; width: 100%">
                        <div style="display: table-cell; align-content: flex-start; width: 65%; text-align: start;">
                <Button Type="@AntDesign.ButtonType.Primary" Loading=@ShowInProgress @onclick=@(async () => await SaveSpending())>
                    @($"{(IsItANewSpending() ? "Submit" : "Submit")}")
                </Button>
                <Button Danger=@true @onclick=@(() => OnCancel())>
                    Cancel
                </Button>
                   </div>
                        <div style="display: table-cell; align-content: flex-end; width: 35%; text-align: end;">
                            <Button Type="@AntDesign.ButtonType.Primary" Danger=@true 
                                Shape="@ButtonShape.Circle"
                                Icon="@IconType.Outline.Close"
                                @onclick=@(() => NavManager.NavigateTo($"/tour/{tour.Id}"))/>
                   </div>
                </div>
            </td>
        </tr>
</table>
</div>
</div>


@code {
    [Parameter]
    public Spending TheSpending { get; set; } = new Spending();

    [Parameter]
    public Tour tour { get; set; } = new Tour();

    [Parameter]
    public Func<Spending, Task> OnSave { get; set; } = (s) => Task.CompletedTask;

    [Parameter]
    public Action OnCancel { get; set; } = () => { };


    [Parameter]
    public Action<string> OnFromChanged { get; set; } = (s) => { };

    [Parameter]
    public string TitleText { get; set; } = "NEW";

    private bool IsItANewSpending()
    {
        return !tour.Spendings.Any(s => !s.Planned && s.GUID == TheSpending.GUID);
    }

    private List<string> SpendingCategories = new List<string>();


    private string PersonLabel(Person p)
    {
        if (string.IsNullOrWhiteSpace(p.ParentId)) return p.Name;
        return $"> {p.Name}";
    }

    private IEnumerable<Person> TourPersons()
    {
        IEnumerable<Person> res = tour?.Persons ?? new();
        res = res.SortedByNameAndDependency();
        return res;
    }

    protected override void OnParametersSet()
    {
        _selectedValuesTo = TheSpending.ToGuid;
        SpendingCategories = (
            tour?.Spendings
                ?.Where(s => !s.Planned)
                ?.Where(s => !string.IsNullOrWhiteSpace(s.Type))
                ?.Select(s => s.Type)?.Distinct()
                ?.OrderBy(s => s) ?? Enumerable.Empty<string>()
            )
            .Concat(new[] { "Common" }) // add a common
            .Distinct()
            .ToList();
    }

    IEnumerable<string> _selectedValuesTo = new List<string>();

    private void OnToPersonsChangedHandler(IEnumerable<string> values)
    {
        if (values != null){
            //Console.WriteLine($"selected: ${string.Join(",", values)}");
            TheSpending.ToGuid = values.ToList();
        }
    }

    public void OnFromSelectedChangedHandler(string v)
    {
        OnFromChanged(v);
    }
    bool ShowInProgress = false;
    private async Task SaveSpending()
    {
        List<string> err = new List<string>();
        if (TheSpending.AmountInCents == 0)
        {
            err.Add("Amount should not be 0");
        }
        if (string.IsNullOrWhiteSpace(TheSpending.Description))
        {
            err.Add("Please Specify Description");
        }
        if (!TheSpending.ToAll && (TheSpending.ToGuid ?? new List<string>()).Count == 0)
        {
            err.Add("Spending should have recepients or be to all");
        }
        if (string.IsNullOrWhiteSpace(TheSpending.FromGuid))
        {
            err.Add("FROM is empty");
        }
        if (err.Count == 0)
        {
            ShowInProgress = true;
            await OnSave(TheSpending);
            ShowInProgress = false;
        } else
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Errors: {string.Join("\n", err)}");
        }
    }


    private string _cname = "";
    private void AddCatToList(MouseEventArgs args)
    {
        if (!string.IsNullOrWhiteSpace(_cname))
        {
            SpendingCategories.Add(_cname);
            _cname = string.Empty;
	   }
    }
    private RenderFragment CategoryDropdownRenderer(RenderFragment originNode)
    {
        RenderFragment customDropdownRender =
    @<Template>
                                                    <div>
                                                        @originNode
                                                        <Divider Style="margin: 4px 0"></Divider>
                                                        <div style="display: flex; flex-wrap: nowrap; padding: 8px">
                                                            <Input Style="flex: auto" @bind-Value="@_cname"/>
                                                            <a style="flex: none; padding: 8px; display: block; cursor: pointer" @onclick="AddCatToList">
                                                                <Icon Type="plus" Theme="outline"></Icon>
                                                                Add Category
                                                            </a>
                                                        </div>
                                                    </div>
    </Template>;

        return customDropdownRender;
    }

}
