@using AntDesign
@inject IJSRuntime JsRuntime

<span>
    <Button Disabled=@disabled Type="@AntDesign.ButtonType.Dashed" @onclick=@(() => open = !open)>@((MarkupString)nameText.AsBreakable(3))</Button>
    @if (open)
    {
        <div>
            <Button Size="small" Disabled=@disabled Type="@AntDesign.ButtonType.Primary" OnClick=@(async () => await OnPersonEdit(person))>Edit</Button>
            <Button Size="small" Disabled=@disabled Danger=@true OnClick=@(async () => {
                disabled = true;
                StateHasChanged();
                var ok = await JsRuntime.InvokeAsync<bool>("confirm", $"Delete '{person.Name}'?");
                if (ok){
                    deleting = true;
                    await OnPersonDelete(person);
                } else {
                    disabled=false;
                }
                })>
                Delete
            </Button>
            <Button Size="small" Disabled=@disabled OnClick=@(async () => await OnPersonSpend(person))>Spend</Button>
        </div>
    }
    @{/*
        <Menu Mode=MenuMode.Vertical @key="@($"menu_{person.GUID}")">
        <SubMenu
        Key="@($"submenu_{person.GUID}")"
        @key="@($"submenu_{person.GUID}")"
        TitleTemplate="TitleTemplate(deleting, idx, person)"
        Disabled=@disabled
        IsOpen=@disabled
        >
        <MenuItem Key="@($"edit_{person.GUID}")" OnClick=@(async () => await OnPersonEdit(person))>Edit @person.Name</MenuItem>
        <MenuItem Key="@($"delete_{person.GUID}")" OnClick=@(async () => {
        disabled = true;
        var ok = await JsRuntime.InvokeAsync<bool>("confirm", $"Delete '{person.Name}'?");
        if (ok){
        deleting = true;
        await OnPersonDelete(person);
        } else {
        disabled=false;
        }
        })
        >
        Delete @person.Name
        </MenuItem>
        <MenuItem Key="@($"spend_{person.GUID}")"
        OnClick=@(async () => await OnPersonSpend(person))
        >Spend @person.Name</MenuItem>
        </SubMenu>
        </Menu>
        */
    }

    @if (!string.IsNullOrWhiteSpace(person.ParentId))
    {
        <span style="font-size:xx-small">&gt; paid by <b style="color:green;">@(tour.Persons.FirstOrDefault(p => p.GUID == person.ParentId)?.Name ?? "n/a")</b></span>
    }
</span>

@code {
    [Parameter]
    public int idx { get; set; }
    [Parameter]
    public Person person { get; set; } = new Person();
    [Parameter]
    public Tour tour { get; set; } = new Tour();

    [Parameter]
    public Func<Person, Task> OnPersonEdit { get; set; } = p => Task.CompletedTask;
    [Parameter]
    public Func<Person, Task> OnPersonDelete { get; set; } = p => Task.CompletedTask;
    [Parameter]
    public Func<Person, Task> OnPersonSpend { get; set; } = p => Task.CompletedTask;

    bool open = false;

    //private bool open = false;
    private bool disabled = false;
    private bool deleting = false;

    int triggerLength = 16;
    string nameText = ""; 
    protected override void OnParametersSet()
    {
        nameText = $"{(deleting ? "[..del..] " : "")}{person.Name}".Trim();
        bool crop = nameText.Length > triggerLength;
        nameText = nameText.Substring(0, crop ? triggerLength : nameText.Length) + (crop ? "…" : "");
    }

    RenderFragment TitleTemplate(bool deleting, int idx, Person person)
    {
        var text = $"{(deleting ? "[..del..] " : "")}{person.Name}".Trim();
        var len = text.Length;
        var style = "";
        if (len > triggerLength)
        {
            style = "font-size: clamp(6px, 2.4vw, 14px)";
        }
        return __builder =>
        {
            <span style="font-family: monospace; @style" @key="@($"name_{person.GUID}")">@((MarkupString)text.AsBreakable(3))</span>
        };
    }
}
