<div 
    style="@RowBg;height: 100%; width: 100%; display:flex;align-items:center;justify-content:center;">
    <b style="cursor: pointer;@RowFg"
    @onclick=@(() => open = true)
    >@debt</b>
</div>
<Modal Title="@($"{person.Name} will {(WillPay ? "PAY" : "Receive")}")"
       Visible="@open"
       Footer=@(footer(() => open = false))
       OnOk=@(() => open = false)
       OnCancel=@(() => open = false)
       DestroyOnClose=@true
       Closable=@true>
    <div style="height: 55vh; overflow:scroll;">
        <TableTemplate Items=@spendingToShow
                       Context="spendingIdx"
                       ConditionalRowStyle=@((s, aa) => $"{SpendingBg(s)};{SpendingFg(s)}")>
            <RowTemplate>
                @{
                    var spending = spendingIdx.Item1;
                    var pTo = tour?.Persons?.FirstOrDefault(pp => pp.GUID == spending.ToGuid[0]) ?? new();
                    var pFrom = tour?.Persons?.FirstOrDefault(pp => pp.GUID == spending.FromGuid) ?? new();
                }
                <td>@spending.AmountInCents</td>
                    @if (WillPay)
                    {
                        <td>
                            To <b>@pTo.Name</b>
                        </td>
                    }
                    @if (!WillPay)
                    {
                        <td>
                            From <b>@pFrom.Name</b>
                        </td>
                    }
            </RowTemplate>
        </TableTemplate>
    </div>
</Modal>

@code {
    [Parameter]
    public long debt { get; set; } = 0;
    [Parameter]
    public Tour tour { get; set; } = new();
    [Parameter]
    public Person person { get; set; } = new();
    [Parameter]
    public int minMeaningfulAmount { get; set; } = 0;



    private bool open = false;

    private bool WillPay;
    private IEnumerable<Spending>? spendingToShow;

    private string RowBg => bgColors[DebtStatus()];
    private string RowFg => fgColors[DebtStatus()];
    private string SpendingBg(Spending spending)
    {
        return bgColors[DebtStatusOfSpending(spending)];
    }
    private string SpendingFg(Spending spending)
    {
        return fgColors[DebtStatusOfSpending(spending)];
    }

    protected override void OnParametersSet()
    {
        (WillPay, spendingToShow) = GetPayOrReceiveSpendings();
    }
    private Dictionary<string, string> bgColors = new()
    {
        {"JustOk", ""},
        {"Pleasure", "background-color: lightgreen"},
        {"Bankrupt", "background-color: lightpink"},
    };
    private Dictionary<string, string> fgColors = new()
    {
        {"JustOk", "color: black"},
        {"Pleasure", "color: green"},
        {"Bankrupt", "color: red"},
    };
    private string DebtStatusOfSpending(Spending spending)
    {
        var pTo = tour?.Persons?.FirstOrDefault(pp => pp.GUID == spending.ToGuid[0]) ?? new();
        var pFrom = tour?.Persons?.FirstOrDefault(pp => pp.GUID == spending.FromGuid) ?? new();
        if (pTo.GUID == person.ParentId || pFrom.ParentId == person.GUID) return "JustOk"; // payment to parent
        if (pFrom.GUID == person.GUID) return "Bankrupt"; // the person will pay
        return "Pleasure"; // someone, not child, will pay me
    }
    private string DebtStatus() // "Pleasure" (will receive), "Bankrupt" (will spend) or "JustOk" (0, or accounts among themselves)
    {
        if (WillPay){ // will pay to someone
            if (!string.IsNullOrWhiteSpace(person.ParentId)) // well, virtually, to my parent
            {
                return "JustOk";
            }
            return "Bankrupt";// AAAA, my money, and nobody covers me...
        }
        if (!WillPay) // I will receive money
        {
            if (debt >= 0) return "JustOk"; // all done
            if (spendingToShow?.Any(s => (tour?.Persons?.FirstOrDefault(p => p.GUID == s.FromGuid)?.ParentId ?? "--") != person.GUID) ?? true) // anyone but my children is going to pay me]
            {
                return "Pleasure";
            }
        }
        return "JustOk";
    }

    private (bool WillPay, IEnumerable<Spending> sp) GetPayOrReceiveSpendings()
    {
        IEnumerable<Spending> sp;
        bool wp;
        var spToPay = tour.Spendings.Where(s => s.Planned && s.FromGuid == person.GUID && s.AmountInCents > minMeaningfulAmount);
        if (spToPay.Any())
        {
            wp = true;
            sp = spToPay;
        } else
        {
            sp = tour.Spendings.Where(s => s.Planned && s.ToGuid.Count == 1 && s.ToGuid[0] == person.GUID && s.AmountInCents > minMeaningfulAmount);
            wp = false;
        }
        return (wp, sp);

    }

    private RenderFragment footer(Action onOk)
    {
        return __builder =>
        {
    <Template>
                            <Button OnClick=@((e) => onOk())
                    Type="primary">
                                Got It
                            </Button>
    </Template>
        };
    }

}
