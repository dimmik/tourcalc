@using TCalcCore.Engine
@using TCalc.Logic
@inject TourcalcEngine engine

@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager

@implements IDisposable


<TableTemplate 
    Items="@GetPersons()"  
    Context="personItem" 
    TopPadding="30"
    ConditionalItemIdxIncrement=@((p, idx) => p.Metadata != "Adding")
    ConditionalRowStyle=@((p, idx) => 
    {
        if (string.IsNullOrWhiteSpace(p.ParentId)){
            return GetFamilyStyle(p.FamilyId);
        } else {
            return $"background-color: #eeeeee";
        }
        //return "";
    })
>
    <TableHeader>
        <th>Name
            @if (ShowWeightSpentReceived)
            {
                <Button Size="small" @onclick=@(() => {ShowWeightSpentReceived = false; IsSpendReceivedSwitchedManually = true;})>&lt;</Button>
            } else
            {
                <Button Size="small" @onclick=@(() => {ShowWeightSpentReceived = true; IsSpendReceivedSwitchedManually = true;})>&gt;</Button>
            }

        </th>
        @if (ShowWeightSpentReceived)
        {
            <th align="center" style="text-align:center">Weight</th>
            <th align="center" style="text-align:center">Spent</th>
            <th align="center" style="text-align:center">Received</th>
        }
        <th align="center" style="text-align:center">Debt</th>
    </TableHeader>
    <NoDataRowTemplate>
        <td colspan="5"><i>No Data</i></td>
    </NoDataRowTemplate>
    <RowTemplate>
        @{
            var person = personItem.Item1;
            var idx = personItem.Item2;
        }
        @if (string.IsNullOrWhiteSpace(person.Metadata))
        {
            <td>
                <PersonNameAndActions 
                    @key=@($"pna_{person.GUID}")
                    idx="idx"
                    person="person"
                    tour="Tour"
                    OnPersonDelete="OnPersonDelete"
                    OnPersonEdit=@((p) => {
                        p.Metadata = "Editing";
                        StateHasChanged();
                        return Task.CompletedTask;
                    })
                    OnPersonSpend=@((p) => {
                        NavManager.NavigateTo($"tour/{Tour?.GUID ?? "000"}/spending/add/{p.GUID}");
                        return Task.CompletedTask;
                    })
                    />
            </td>
            @if (ShowWeightSpentReceived)
            {
                <td align="center" valign="middle" style="padding:0; height: inherit;">
                    <div style="height: 100%; width: 100%; display:flex;align-items:center;justify-content:center;">
                        @person.Weight
                    </div>
                </td>
                <td align="center" valign="middle" style="padding:0; height: inherit;"><PersonSpentInfo tour=@Tour person="person" @key=@($"psi_{person.GUID}")/></td>
                <td align="center" valign="middle" style="padding:0; height: inherit;"><PersonReceivedInfo tour=@Tour person="person" @key=@($"pri_{person.GUID}") /></td>
            }
            <td align="center" valign="middle" style="padding:0; height: inherit;">
                <PersonDebt @key=@($"debt_{person.GUID}")
                    debt="Debt(person)"
                    person="person"
                    tour=@(Tour ?? new Tour())
                    minMeaningfulAmount=@(settings.MinimumMeaningfulDebt)
                    />
            </td>
        } 
        else if (person.Metadata == "Editing")
        {
            @AddEditCodeBlock(person, () => (person ?? new Person()).Metadata = "", OnPersonEdit)
        } else if (person.Metadata == "Adding")
        {
            if (!AddingPerson)
            {
                <td colspan="@(tableColspan-1)"><Button Size="small" @onclick=@(() => AddingPerson = !AddingPerson)>+ Add Person</Button>
                </td>
                <td>
                    @{/*<Select @bind-Value=@(currency)
                            TItemValue="Currency"
                            TItem="Currency"
                            LabelName="@nameof(Currency.Name)"
                            AllowClear=@false
                            DataSource="Tour?.Currencies ?? new Currency[0]"
                            OnSelectedItemChanged="() => Tour = GetTourInCurrency()"
                            IgnoreItemChangesLeadsToException="false" />*/}
                </td>
            } else
            {
                @AddEditCodeBlock(person, () => AddingPerson = !AddingPerson, OnPersonAdd)
            }
        }
    </RowTemplate>
</TableTemplate>

@code {
    private Tour? Tour { get; set; } = null;
    private Currency? currency = null;

    [Parameter]
    public Tour? tour { get; set; } = null;

    [Parameter]
    public Func<Person, Task> OnPersonEdit { get; set; } = p => Task.CompletedTask;
    [Parameter]
    public Func<Person, Task> OnPersonAdd { get; set; } = p => Task.CompletedTask;
    [Parameter]
    public Func<Person, Task> OnPersonDelete { get; set; } = p => Task.CompletedTask;

    Dictionary<string, Person> EditingPersons { get; set; } = new Dictionary<string, Person>();

    bool AddingPerson = false;

    bool ShowWeightSpentReceived = true;
    bool IsSpendReceivedSwitchedManually = false;
    int tableColspan => ShowWeightSpentReceived ? 5 : 2;

    int windowWidth = 0;

    private UISettings settings = new UISettings();

    private string GetFamilyStyle(string familyId){
        if (string.IsNullOrWhiteSpace(familyId)) return "background-color: #ffffff";
        return "background-color: mintcream";
    }

    protected override async Task OnInitializedAsync()
    {
        settings = await engine.GetUISettings();
        await OnResize();
        BrowserResizeService.OnResize += OnResize;
        engine.onPersonAddStart += SubmittingOn;
        engine.onPersonAddFinish += SubmittingOff;
        engine.onPersonEditStart += SubmittingOn;
        engine.onPersonEditFinish += SubmittingOff;
        engine.onPersonDeleteStart += SubmittingOn;
        engine.onPersonDeleteFinish += SubmittingOff;
    }
    private async Task OnResize()
    {
        if (settings.Collapse_Columns_In_Person_List_On_Smaller_Screen && !IsSpendReceivedSwitchedManually)
        {
            var dim = await JsRuntime.InvokeAsync<BrowserDimension>("getDimensions");
            windowWidth = dim.Width;
            var newShowWeightSpentReceived = windowWidth > settings.Smaller_Screen_Width;
            if (newShowWeightSpentReceived != ShowWeightSpentReceived)
            {
                ShowWeightSpentReceived = newShowWeightSpentReceived;
                StateHasChanged();
            }
        }
    }
    public void Dispose()
    {
        engine.onPersonAddStart -= SubmittingOn;
        engine.onPersonAddFinish -= SubmittingOff;
        engine.onPersonEditStart -= SubmittingOn;
        engine.onPersonEditFinish -= SubmittingOff;
        engine.onPersonDeleteStart -= SubmittingOn;
        engine.onPersonDeleteFinish -= SubmittingOff;
        BrowserResizeService.OnResize -= OnResize;
    }
    private Task SubmittingOn()
    {
        IsSubmittingPerson = true; 
        StateHasChanged(); 
        return Task.CompletedTask;
    }
    private Task SubmittingOff()
    {
        IsSubmittingPerson = false; 
        StateHasChanged(); 
        return Task.CompletedTask;
    }

    private Tour GetTourInCurrency()
    {
        var calc = new TourCalculator(tour, currency);
        return calc.SuggestFinalPayments();
    }

    protected override void OnParametersSet()
    {
        currency = tour?.Currency ?? new Currency();
        Tour = GetTourInCurrency();
        EditingPersons = GetPersons().Select(p => p.SafeClone<Person>()).ToDictionary(p => p.GUID);
    }

    private long Debt(Person p)
    {
        // round to MinimumMeaningfulDebt
        return Math.Abs(p.Debt()) > settings.MinimumMeaningfulDebt ? p.Debt() : 0;
    }


    private IEnumerable<Person> GetPersons()
    {
        return new[] { new Person() { Name = "", Metadata = "Adding", GUID = "New" } }.Concat(GetSortedTourPersons());
    }

    private IEnumerable<Person> GetSortedTourPersons()
    {
        return Tour?.Persons?.SortedByNameAndDependency() ?? Enumerable.Empty<Person>();
    }

    private bool IsSubmittingPerson { get; set; } = false;
    private bool Submitted { get; set; } = false;

    private async Task OnSubmit(Person pp, Func<Person, Task> onSubmit)
    {
        if (pp == null) return;
        if (string.IsNullOrWhiteSpace(pp?.Name))
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Person name should not be blank");
            return;
        }
        await onSubmit(pp);
        Submitted = true;
    }

    private RenderFragment AddEditCodeBlock(Person person, Action onCloseButton, Func<Person, Task> onSubmit)
    {
        Person pp = EditingPersons.ContainsKey(person.GUID) ? EditingPersons[person.GUID] : new Person();
        pp.Metadata = "";
        return __builder =>
        {
    <td>
        @if (IsSubmittingPerson)
        {
            <div>submitting...</div>
        }
        <input @bind-value=@(pp.Name) 
                size=7 
                disabled=@IsSubmittingPerson
                @onkeyup=@(async (e) => {
                if (e.Code == "Enter" || e.Code == "NumpadEnter"){
                    await OnSubmit(pp, onSubmit);
                }
            }) 
        /> 
        <input @bind-value=@(pp.FamilyId) 
                size=2 
                disabled=@IsSubmittingPerson
                @onkeyup=@(async (e) => {
                if (e.Code == "Enter" || e.Code == "NumpadEnter"){
                    await OnSubmit(pp, onSubmit);
                }
            }) 
        /> 
        <Button 
            Type="primary"
            Size="small"
            Loading=@IsSubmittingPerson
            @onclick=@(async () => {
                await OnSubmit(pp, onSubmit);
            })>Save</Button>

        <span>&nbsp;|&nbsp;</span>
        <Button 
           Type="primary"
           Shape="@ButtonShape.Circle"
           Icon="@IconType.Outline.Close"
           Size="small"
           Danger=@true
           @onclick=@(() => onCloseButton())/>
        <div>→ 
        <nobr>
             <Select
                @bind-Value="pp.ParentId"
                TItemValue="string"
		        TItem="string"
                Placeholder="Payer"
                Style="display: inline-block;"
                Disabled=@IsSubmittingPerson
                DropdownMatchSelectWidth=@false
                AllowClear=@true
                DefaultActiveFirstItem="true"
                EnableSearch
            >
            <SelectOptions>
            @foreach (var p in (Tour?.Persons ?? new List<Person>()).Where(ppp => ppp.GUID != pp.GUID))
            {
                <SelectOption TItemValue="string" TItem="string" Value=@p.GUID Label=@p.Name />
            }
            </SelectOptions>
        </Select>
        </nobr>
        </div>
    </td>
    <td colspan="@(tableColspan - 1)">
        <input @bind-value=@(pp.Weight) size="3" disabled=@IsSubmittingPerson/>
        @if (settings.Show_Debug_UI){
            <span>g: <input @bind-value=@(pp.GroupId) size="3" disabled=@IsSubmittingPerson/></span>
        }
    </td>
        };

        
    }



    class BrowserDimension
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }


}
