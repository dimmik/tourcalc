@using TCalcCore.Engine
@inject TourcalcEngine engine
@implements IDisposable

@if (tour != null && UnsyncedItemNumber > 0)
{
    <span style="cursor:pointer;color:black;background-color: lightpink" @onclick="DoSync">
        @UnsyncedItemNumber
    </span>
} else
{
    <span></span>
}

@code {

    private Tour? tour = null;

    protected override async Task OnInitializedAsync()
    {
        engine.onTourLoaded += OnTourLoaded;
        engine.onTourListLoaded += OnTourListLoaded;
        engine.DataSvc.OnServerQueueStored += OnUpdatedAsync;

        await OnUpdatedAsync();
    }
    public void Dispose()
    {
        engine.onTourLoaded -= OnTourLoaded;
        engine.onTourListLoaded -= OnTourListLoaded;
        engine.DataSvc.OnServerQueueStored -= OnUpdatedAsync;
    }
    private Task OnTourLoaded(Tour t, bool a, DateTimeOffset aa)
    {
        tour = t;
        InvokeAsync( StateHasChanged );
        return Task.CompletedTask;
    }
    private Task OnTourListLoaded(TourList t, bool a, DateTimeOffset aa)
    {
        tour = null;
        InvokeAsync( StateHasChanged );
        return Task.CompletedTask;
    }
    private int UnsyncedItemNumber = 0;
    private async Task OnUpdatedAsync()
    {
        UnsyncedItemNumber = await engine.DataSync.CountOfUnsyncedOperations(tour?.Id ?? "n_a");
        InvokeAsync( StateHasChanged );
    }
    private async Task DoSync()
    {
        await engine.DataSync.Sync(tour?.Id ?? "n_a");
    }

}
