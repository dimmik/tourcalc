@using TCalcCore.Engine
@inject TourcalcEngine engine

@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager

@using AntDesign.Select


<TableTemplate 
    Items=@(GetSpendingSorted()) 
    Context="spendingItem" 
    TopPadding="30"
    ConditionalItemIdxIncrement=@((s, idx) => !s.Planned && (!s.IsDryRun || s.IncludeDryRunInCalc))
    ConditionalRowStyle=@((s, idx) => 
    {
        if (s.Planned){
            if (s.Description.StartsWith("Family")){
                return "background-color: aquamarine";
            } else {
                return "background-color: yellow";
            }
        } else if (s.IsDryRun) {
            return $"background-color: LightSalmon";
        } else if (!string.IsNullOrWhiteSpace(s.Color)) {
            return $"background-color: {s.Color}";
        } else {
            return $"background-color: {(idx % 2 == 0 ? "LightCyan" : "white")}";
        }
        //return "";
    })
>
    <TableHeader>
        <th>
            <div style="font-size:xx-small; font-weight:normal">
                @{
                    var sp = GetSpendingSorted();
                }
                #: <b>@sp.Count()</b> &Sigma;: <b style="color:green">@sp.Sum(s => s.AmountInCurrentCurrency(Tour)).ToString("N0", GlobConsts.NumGroupSpaceSeparated) @Tour?.Currency?.Name</b>
            </div>
            <span style="cursor:pointer;@(sortingField == SortingField.Descr ? "color: blue;" : "")" @onclick=@(() => ToggleSorting(SortingField.Descr))>Spending Description &nbsp;</span>
                        
            <span style="cursor:pointer;@(sortingField == SortingField.Date ? "color: blue;" : "")" @onclick=@(() => ToggleSorting(SortingField.Date))>Dt&nbsp;</span>
            <span style="cursor:pointer;@(sortingField == SortingField.Type ? "color: blue;" : "")" @onclick=@(() => ToggleSorting(SortingField.Type))>Cat&nbsp;</span>
            @if (ShowMassChange)
            {
                <Button Size="small" @onclick=@(() => MassChangeCat = !MassChangeCat)>mass change cats</Button>
                if (MassChangeCat)
                {
                    <b>Selected @(MassChangeIds.Values.Where(v => v).Count())</b>
                }
                @if (MassChangeCat && MassChangeIds.Values.Where(v => v).Any())
                {
                    <div style="border: 1px solid green">
                        Change Category of @MassChangeIds.Values.Where(v => v).Count() spendings to 
                        <input @bind-value="NewCategory"/>
                        <Button @onclick=@(() => DoMassChange())>Apply</Button>
                    </div>
                }
            }
            &nbsp; <span style="cursor: pointer" @onclick=@(() => OnToggleShowPlanned?.Invoke())>[@(ShowPlanned ? "-" : "+")]</span>
            
            <Select Mode="multiple"
                Placeholder="Categories"
                DataSource="TourCategories"
		        @bind-Values="@filterCategories"
		        TItemValue="string"
		        TItem="string"
                Style="width:100%;"
                DropdownMatchSelectWidth=@false
                HideSelected=@false
                Size="small"
                MaxTagCount="@ResponsiveTag.Responsive"
                IgnoreItemChangesLeadsToException="false"
		        AllowClear/>
            </th>
        <th><span style="cursor:pointer;@(sortingField == SortingField.From ? "color: blue;" : "")" @onclick=@(() => ToggleSorting(SortingField.From))>From</span></th>
        <th><span style="cursor:pointer;@(sortingField == SortingField.Amount ? "color: blue;" : "")" @onclick=@(() => ToggleSorting(SortingField.Amount))>Amount</span></th>
        <th>Recepients</th>
    </TableHeader>
    <NoDataRowTemplate>
        <td colspan="4"><i>No Data</i></td>
    </NoDataRowTemplate>

    <RowTemplate>
        @{
            var spending = spendingItem.Item1;
            var idxUp = spendingItem.Item2;
            var idx = nonPlannedShownSpendingCount - idxUp + 1;
        }
        <td>
            @if (!spending.Planned)
            {
                <span style="cursor:pointer;" 
                @onclick=@(() => OnSpendingDeleteClicked(spending))>
                <b>X&nbsp;</b>
                </span>
                <span>&nbsp;@idx. </span>
                @if (MassChangeCat)
                {
                    <Checkbox @key=@($"massck_{spending.GUID}")
                          Value=@(MassChangeIds.ContainsKey(spending.GUID) ? MassChangeIds[spending.GUID] : false)
                          OnChange=@((c) => MassChangeIds[spending.GUID] = c)></Checkbox>
                }
            }
            @((MarkupString)spending.Description.AsBreakable())
            @if(spending.IsDryRun){
                <span>&nbsp;
                    <Switch @bind-Value=@(spending.IncludeDryRunInCalc) 
                    CheckedChildren="++" 
                    UnCheckedChildren="--" 
                    Style=@($"font-size:xx-small; background-color: {(spending.IncludeDryRunInCalc ? "green" : "gray")}")
                    Size="small" 
                    OnChange=@(() => UpdateIncludeInDryRun(spending))
                    />
                    &nbsp;
                    <Button Size="small" OnClick=@(() => MakeSpendingReal(spending))>+</Button>
                </span>
            }

            <div style="font-size: xx-small">[@spending.DateCreated.ToString("dd.MM.yyyy HH:mm")] 
                @if (!spending.Planned)
                {
                    <b>@spending.Type</b>
                }
                @if (EditActionTemplate != null)
                {
                    <span>@EditActionTemplate(spending)</span>
                }
                </div>
        </td>
        <td>@((MarkupString)((Tour?.Persons ?? new List<Person>()).Where(p => p.GUID == spending.FromGuid).FirstOrDefault()?.Name ?? "").AsBreakable())</td>
        <td>
            <b>@spending.AmountInCurrentCurrency(Tour).ToString("N0", GlobConsts.NumGroupSpaceSeparated) <span style="font-size: xx-small">@Tour.CurrencyNameEmptyIfSingleCurrency()</span></b>
            <span>
                @if (Tour.IsMultiCurrency() && spending.Currency != (Tour?.Currency ?? spending.Currency))
                {
                    <div style="font-size: xx-small">
                        <i>
                            @spending.AmountInCents.ToString("N0", GlobConsts.NumGroupSpaceSeparated)
                            <b>@((spending.Currency ?? Currency.Default).Name)</b>
                        </i>
                    </div>
                }
            </span>
        </td>
        <td>@if (spending.ToAll)
            {
                <span style="background-color:green;color:yellow;font-size:xx-small">ALL</span>
            }    
            else 
            {
                <span style="font-size:xx-small">
                    @if (spending.ToGuid.Count > 1){
                        <span>[<b>@spending.ToGuid.Count</b>]&nbsp;</span>
                    }
                    @{
                        var c = new[] { "color: Black", "color: DarkGreen; font-weight: bold" };
                        var names = spending
                            .ToGuid
                            .Select(g => (Tour?.Persons ?? new List<Person>())
                            .Where(p => p.GUID == g)
                            .FirstOrDefault()?.Name?.AsBreakable() ?? "n/a")
                            .OrderBy(n => n)
                            .Zip(Enumerable.Range(0, spending.ToGuid.Count).Select(x => x % 2) )
                            .Select(nc => $"<span style='{c[nc.Second]}'>{nc.First}</span>")
                            ;
                    }
                    @(
                        (MarkupString)$"{string.Join(", ", names)}"
                     )
                </span>
                if (!spending.IsPartialWeighted && spending.ToGuid.Count > 1)
                {
                    <div style="color:darkcyan; font-size: xx-small"><b><i>NOT Weighted</i></b></div>
                }
            }
                </td>
    </RowTemplate>
</TableTemplate>

@code {
    string guid = Guid.NewGuid().ToString();
    [Parameter]
    public Tour? Tour { get; set; } = null;

    [Parameter]
    public bool ShowPlanned { get; set; } = false;

    [Parameter]
    public Action? OnToggleShowPlanned { get; set; } = null;

    [Parameter]
    public Func<IEnumerable<Spending>, IEnumerable<Spending>> SpendingListPreProcessor { get; set; } = (s) => s;

    private IEnumerable<string> TourCategories = Enumerable.Empty<string>();

    public bool ShowMassChange = false;

    private bool MassChangeCat = false;
    private Dictionary<string, bool> MassChangeIds = new();
    private string NewCategory = "";

    private UISettings settings = new UISettings();

    protected override async Task OnInitializedAsync()
    {
        settings = await engine.GetUISettings();
        ShowMassChange = settings.Show_Mass_Spending_Change;

    }
    private void UpdateTourCategories()
    {
        TourCategories = (Tour?.Spendings?
                                .Where(s => !s.Planned)?
                                .Select(s => s.Type)?.Where(cc => !string.IsNullOrWhiteSpace(cc))
                                ?? new string[0])
                                .Distinct()
                                .OrderBy(s => s)
                                ;
        filterCategories = (filterCategories ?? new List<string>()).Intersect(TourCategories ?? new List<string>());
        guid = Guid.NewGuid().ToString();
    }
    protected override void OnParametersSet()
    {
        UpdateTourCategories();
        if (OnToggleShowPlanned == null)
        {
            OnToggleShowPlanned = () => ShowPlanned = !ShowPlanned;
        }
        InitSortPredicates();
    }

    private async Task DoMassChange()
    {
        var ok = await JsRuntime.InvokeAsync<bool>("confirm", $"Change {MassChangeIds.Keys.Count()} spendings category to {NewCategory}?");
        if (!ok) return;
        List<Spending> toChange = new();
        foreach (var sid in MassChangeIds.Keys)
        {
            Spending? sp = Tour?.Spendings?.Where(s => s.GUID == sid)?.FirstOrDefault();
            if (sp != null)
            {
                sp.Type = NewCategory;
                toChange.Add(sp);
            }
        }
        if (Tour != null)
        {
            _ = engine.RequestEditSpending(Tour.Id, toChange.ToArray());
        }
        MassChangeIds.Clear();
        MassChangeCat = false;
        StateHasChanged();
    }
    private Task UpdateIncludeInDryRun(Spending s){
        if (Tour != null){
            _ = engine.RequestEditSpending(Tour.Id, s);
            StateHasChanged();
        }
        return Task.CompletedTask;
    }
    private Task MakeSpendingReal(Spending s)
    {
        if (Tour != null)
        {
            s.IsDryRun = false;
            _ = engine.RequestEditSpending(Tour.Id, s);
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

    private void InitSortPredicates()
    {
        sortPredicates[SortingField.From] = (s) => (Tour?.Persons?.FirstOrDefault(p => p.GUID == s.FromGuid)?.Name ?? "");
        sortPredicates[SortingField.Amount] = (s) => s.AmountInCents.ToString("00000000000000");
        sortPredicates[SortingField.Descr] = (s) => s.Description;
        sortPredicates[SortingField.Date] = (s) => $"{s.DateCreated: yyyyMMdd_HHmmss}";
        sortPredicates[SortingField.Type] = (s) => string.IsNullOrWhiteSpace(s.Type) ? new string(Char.MaxValue, 1) : s.Type;
    }

    private SortingField? sortingField = null;
    private SortingType sortingType = SortingType.Asc;
    private void ToggleSorting(SortingField field)
    {
        if (sortingField != field)
        {
            sortingField = field;
            sortingType = SortingType.Asc;
        } 
        else
        {
            if (sortingType == SortingType.Asc){
                sortingType = SortingType.Desc;
            } else 
            {
                sortingField = null;
            }
        }
    }
    private IEnumerable<Spending> SortByPredicate(IEnumerable<Spending> seq, SortingType st, Func<Spending, string> predicate)
    {
        if (st == SortingType.Asc)
        {
            return seq.OrderBy(s => !s.Planned).ThenBy(predicate);
        } else
        {
            return seq.OrderBy(s => !s.Planned).ThenByDescending(predicate);                
        }
    }

    Dictionary<SortingField, Func<Spending, string>> sortPredicates = new Dictionary<SortingField, Func<Spending, string>>();

    private IEnumerable<Spending> FieldSort(IEnumerable<Spending> seq)
    {
        if (sortingField == null) return seq;
        if (sortPredicates.ContainsKey(sortingField.Value))
        {
            return SortByPredicate(seq, sortingType, sortPredicates[sortingField.Value]);
        }
        return seq;
    }
    IEnumerable<string>? filterCategories = new List<string>();

    private IEnumerable<Spending> FieldFilter(IEnumerable<Spending> seq)
    {
        if (filterCategories != null && filterCategories.Any())
        {
            return seq.Where(s => filterCategories.Contains(s.Type));
        }
        return seq;
    }
    private int nonPlannedShownSpendingCount = 0;
    public IEnumerable<Spending> GetSpendingSorted()
    {
        IEnumerable<Spending> res = (Tour?.Spendings ?? new List<Spending>());
        var planned = res.Where(s => s.Planned && Math.Abs(s.AmountInCents) > settings.MinimumMeaningfulDebt);
        var real = res.Where(s => !s.Planned);
        planned = planned
            .OrderBy(s => s.Description.StartsWith("Family") ? 0 : 1) // first family
            .ThenBy(s => (Tour?.Persons ?? new List<Person>()).FirstOrDefault(p => p.GUID == s.FromGuid)?.Name ?? "") // then by name
            .ThenByDescending(s => s.AmountInCents) // then by amount
            ;
        real = real.OrderByDescending(s => s.DateCreated);

        var preprocessed = SpendingListPreProcessor((ShowPlanned ? planned : new Spending[0]).Concat(real).ToList());
        var sorted = FieldSort(preprocessed);
        var filtered = FieldFilter(sorted);
        nonPlannedShownSpendingCount = filtered.Count(s => !s.Planned);
        return filtered;
    }

    [Parameter]
    public RenderFragment<Spending>? EditActionTemplate { get; set; }

    [Parameter]
    public Func<Spending, Task> OnSpendingDelete { get; set; } = (s) => Task.CompletedTask;

    async Task OnSpendingDeleteClicked(Spending s)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Delete spending '{s.Description}'");
        if (confirmed)
        {
            await OnSpendingDelete(s);
        }
    }
    enum SortingType
    {
        Asc, Desc
    }
    enum SortingField
    {
        From, Descr, Date, Type, Amount
    }
}
