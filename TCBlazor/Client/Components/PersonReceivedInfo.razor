

<div style="height: 100%; width: 100%; display:flex;align-items:center;justify-content:center;">
    <Button Size="small" Style="color:red; font-weight: bold" @onclick=@(() => open = true)>
        @person.ReceivedInCents.ToString("N0", GlobConsts.NumGroupSpaceSeparated) <span style="font-size:xx-small">@tour.CurrencyNameEmptyIfSingleCurrency()</span>
    </Button>
</div>


<Modal Title="@($"Received for {person.Name} {person.ReceivedInCents.ToString("N0", GlobConsts.NumGroupSpaceSeparated)} {tour.CurrencyNameEmptyIfSingleCurrency()}")"
       Visible="@open"
       Footer=@(footer(() => open = false))
       OnOk=@(() => open = false)
       OnCancel=@(() => open = false)
       DestroyOnClose=@true
       Closable=@true>
        <div style="height: 55vh; overflow:scroll;">
            @{
                var data = person.ReceivedSendingInfo
                        .Where(si => !string.IsNullOrWhiteSpace(si.Type))
                        .Select(si => (si.Type, si.ReceivedAmountInCents))
                        .Aggregate(new Dictionary<string, long>(), (d, si) => {
                                if (!d.ContainsKey(si.Type)) d[si.Type] = 0;
                                d[si.Type] += si.ReceivedAmountInCents;
                                return d;
                            }
                        )
                        .Select(dkv => (dkv.Key, (int)dkv.Value));
            }
            @if (data.Any()){
                <div style="width:75%; margin: 0 auto; border: 1px solid #dddddd">
                    <SimpleBlazorPieChart.SimplePieChart
                    ShowSubcategories=@true
                    ShowAbsoluteNumbers=@true
                    Width="100px"
                    Data=@data
                    ></SimpleBlazorPieChart.SimplePieChart>
                </div>
            }


            <TableTemplate Items=@(person.ReceivedSendingInfo)
                           Context="siItem"
                           ConditionalRowStyle=@((spi, idx) => {
                           if (!spi.IsSpendingToAll && spi.ToNames.Count() == 1) // personal
                           {
                           return "background-color: lightgreen";
                           }
                           if (!spi.IsSpendingToAll){
                           return "background-color: lightblue";
                           }
                           return "background-color: white";
                           })>
                <RowTemplate>
                @{
                    var si = siItem.Item1;
                    if (siItem.Item2 == 1)
                    {
                        subtotal = 0;
                    }
                    subtotal += si.ReceivedAmountInCents;
                    }
                    <td>@((MarkupString)si.From.AsBreakable(5))</td>
                    <td>
                    <b>@si.ReceivedAmountInCents.ToString("N0", GlobConsts.NumGroupSpaceSeparated) <span style="font-size:xx-small">@tour.CurrencyNameEmptyIfSingleCurrency()</span></b>
                        <span style="font-size: xx-small">
                            @($"{si.ReceivedAmountInCents * 100.0 / si.TotalSpendingAmountInCents: 0.00}")%
                        of @si.TotalSpendingAmountInCents.ToString("N0", GlobConsts.NumGroupSpaceSeparated) <span style="font-size:xx-small">@tour.CurrencyNameEmptyIfSingleCurrency()</span>
                        </span>
                    </td>
                    <td>
                        @if (!string.IsNullOrWhiteSpace(si.Type))
                        {
                            <span style="font-size: xx-small; font-style:italic; background-color: yellow; color: green">(@si.Type)</span>
                            <span>&nbsp;</span>
                        }
                        @((MarkupString)si.SpendingDescription.AsBreakable())
                        @if (si.ToNames.Any()){
                            <div style="font-size: xx-small"> to
                                @foreach (var (n, odd, idx) in si.ToNames.Zip(Enumerable.Range(0, 1000)).Select(nidx => (nidx.First, nidx.Second % 2, nidx.Second)))
                                {
                                    <b style="color: @(odd == 0 ? "black" : "green");">
                                        @($"{(idx == 0 ? "" : ",")}") <span style="@(n == person.Name ? "text-decoration: underline;" : "")">@((MarkupString)n.AsBreakable(5))</span>
                                    </b>
                                } 
                            </div>
                        }

                    <span style="font-size: xx-small; font-weight: bold">&nbsp;&gt; @subtotal.ToString("N0", GlobConsts.NumGroupSpaceSeparated) <span style="font-size:xx-small">@tour.CurrencyNameEmptyIfSingleCurrency()</span></span>
                    </td>
                </RowTemplate>
                <NoDataRowTemplate>
                    <td colspan="3"><i>No Data</i></td>
                </NoDataRowTemplate>
            </TableTemplate>
        </div>
</Modal>


@code {
    [Parameter]
    public Person person { get; set; } = new Person();
    [Parameter]
    public Tour tour { get; set; } = new Tour();
    private bool open = false;

    private long subtotal = 0;

    private RenderFragment footer(Action onOk)
    {
        return __builder =>
        {
    <Template>
                        <Button OnClick=@((e) => onOk())
                        Type="primary"
                                >
                                    Got It
                        </Button>
    </Template>
        };
    }
    protected override void OnParametersSet()
    {
        subtotal = 0;
    }
}
