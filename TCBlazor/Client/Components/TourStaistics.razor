@using SimpleBlazorPieChart
@using ColorSequenceGenerator

@using TCalcCore.Engine
@inject TourcalcEngine engine

@using System.Globalization

<!--
    1. spendings by category
    2. chart
-->
<table><tr>
        <td style="padding: 5px; vertical-align: top;">
            <SimplePieChart Data="summary"
                ColorSequenceGenerator="csg"
                ShowSubcategories=@true
                ShowAbsoluteNumbers=@true
                RenderExtraControls="settings.Show_Debug_UI">
                <ExtraControls>
                    Current Seed color: <span style="color: @csg.Seed">@csg.Seed</span>
                    @{
                        if (Magic == -1) Magic = (int)(csg.Magic * 1000);
                        if (Seed == null) Seed = csg.Seed.ToString("rgb");
                    }
                    <RadzenNumeric Step="1" @bind-Value="@Magic" TValue="int" Change=@(i => csg.Magic = Magic * 1.0 / 1000)/>
                    <RadzenColorPicker @bind-Value=@Seed Change=@(c => csg.Seed = Seed)/>
                </ExtraControls>
            </SimplePieChart>
        </td>
    </tr>
    <tr>
    <td>
            Total: 
            <ul style="display: inline-block; padding:0;">
                @foreach (var c in Tour?.Currencies?.OrderByDescending(c => c.CurrencyRate) ?? Enumerable.Empty<Currency>())
                {
                    var pp = totalSpent;
                    var cc = Tour?.Currency ?? new();
                    var rate = cc.CurrencyRate * 1.0 / c.CurrencyRate;
                    var amountInCurrency = pp * rate;
                    <li style="display: inline-block; padding:0;"><b>@((amountInCurrency).ToString("N0", GlobConsts.NumGroupSpaceSeparated))</b> @c.Name;&nbsp;</li>
                }
            </ul>

            <br/>
            Per Person (@adultPersonWeight w): 
            <ul style="display: inline-block; padding:0;">
            @foreach (var c in Tour?.Currencies?.OrderByDescending(c => c.CurrencyRate) ?? Enumerable.Empty<Currency>())
            {
                var pp = totalSpent * adultPersonWeight / totalWeight;
                var cc = Tour?.Currency ?? new();
                var rate = cc.CurrencyRate * 1.0 / c.CurrencyRate;
                var amountInCurrency = pp * rate;
                    <li style="display: inline-block; padding:0;"><b>@((amountInCurrency).ToString("N0", GlobConsts.NumGroupSpaceSeparated))</b> @c.Name;&nbsp;</li>
            }
            </ul>
    </td>
    </tr>
        @if (Tour.IsMultiCurrency()){
        <tr><td>
        <div>Currency: <b style='color: green'>@Tour.Currency.Name</b></div>
            <ul>
            @foreach (var c in Tour.Currencies)
            {
                var cc = Tour.Currency;
                var rate = cc.CurrencyRate > c.CurrencyRate ? cc.CurrencyRate * 1.0 / c.CurrencyRate : c.CurrencyRate * 1.0 / cc.CurrencyRate;
                var (fc, sc) = cc.CurrencyRate > c.CurrencyRate ? (cc, c) : (c, cc);
                if (cc != c){
                    <li>
                      <b style="@(fc == cc ? "color:green" : "")">@fc.Name</b> / <b style="@(sc == cc ? "color:green" : "")">@sc.Name:</b> @($"{rate:#.00}")
                    </li>
                }
            }
            </ul>
        </td></tr>
        }
</table>
@code {
    [Parameter]
    public Tour Tour { get; set; } = new Tour();

    private IEnumerable<(string Name, int Amount)> summary = new List<(string Name, int Amount)>()
    {
        ("A", 10)
    };

    private int Magic = -1;
    private string? Seed = null;
    private CSG csg = new();

    private UISettings settings = new();

    private long totalSpent = 0;
    private int totalWeight = 100;
    private int adultPersonWeight = 100;


    protected override async Task OnInitializedAsync()
    {
        settings = await engine.GetUISettings();
        summary = GetSpendingForStat();
        CalculatePerPerson();
        csg = new() { Magic = settings.Magic_Piechart_Color_Scheme_Number * 1.0 / 1000 };
    }

    protected override void OnParametersSet()
    {
        summary = GetSpendingForStat();
        CalculatePerPerson();
    }

    private void CalculatePerPerson()
    {
        try
        {
            totalSpent = Tour.Spendings.Where(s => !s.Planned && !string.IsNullOrWhiteSpace(s.Type) && (!s.IsDryRun || s.IncludeDryRunInCalc)).Select(s => s.AmountInCurrentCurrency(Tour)).Sum();
            totalWeight = Tour.Persons.Select(p => p.Weight).Sum();
            if (totalWeight == 0) totalWeight = 100;
            // adult person weight
            // if there is a parent - his weight
            if (Tour.Persons.Any(p => !string.IsNullOrWhiteSpace(p.ParentId)))
            {
                var parentId = Tour.Persons.Where(p => !string.IsNullOrWhiteSpace(p.ParentId)).Select(p => p.ParentId).First();
                var parent = Tour.Persons.Where(p => p.GUID == parentId).FirstOrDefault();
                if (parent != null) adultPersonWeight = parent.Weight;
            }
            else
            {
                // else - get min
                if (Tour.Persons.Any())
                {
                    adultPersonWeight = Tour.Persons.Where(p => p.Weight > 0).Select(p => p.Weight).Min();
                }
            }
        }
        catch
        {
            // cannot calculate - so be it
        }
    }

    public IEnumerable<(string Name, int Amount)> GetSpendingForStat()
    {
        var ss = Tour.Spendings
        .Where(s => !s.Planned && !string.IsNullOrWhiteSpace(s.Type) && (!s.IsDryRun || s.IncludeDryRunInCalc))
        ;
        Dictionary<string, long> summary = new Dictionary<string, long>();
        foreach (var s in ss)
        {
            if (!summary.ContainsKey(s.Type)) summary[s.Type] = 0;
            summary[s.Type] += s.AmountInCurrentCurrency(Tour);
        }
        return summary.DistinctBy(s => s.Key).OrderByDescending(s => s.Value).Select(s => (s.Key, (int)s.Value));
    } 

}
