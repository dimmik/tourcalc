@using SimpleBlazorPieChart
@using ColorSequenceGenerator

@using TCalcCore.Engine
@inject TourcalcEngine engine

@using System.Globalization

<!--
    1. spendings by category
    2. chart
-->
<table><tr><td style="padding: 5px; vertical-align: top; font-size: x-small;">
            <table>
            @foreach (var s in summary)
            {
                <tr><td align="left">@s.Name: </td><td> <b>@s.Amount.ToString("N0", GlobConsts.NumGroupSpaceSeparated)</b></td></tr>
            }
            <tr><td align="left"><b>TOTAL:</b> </td><td align="right"> <b style="font-size: small">
                @(summary.Sum(s => s.Amount).ToString("N0", GlobConsts.NumGroupSpaceSeparated))
                </b></td>
            </tr>
            </table>
        </td>
        <td style="padding: 5px; vertical-align: top;">
            <SimplePieChart Data="summary"
                ColorSequenceGenerator="csg"
                ShowSubcategories=@true
                ShowAbsoluteNumbers=@true
                RenderExtraControls="settings.Show_Debug_UI">
                <ExtraControls>
                    Current Seed color: <span style="color: @csg.Seed">@csg.Seed</span>
                    @{
                        if (Magic == -1) Magic = (int)(csg.Magic * 1000);
                        if (Seed == null) Seed = csg.Seed.ToString("rgb");
                    }
                    <RadzenNumeric Step="1" @bind-Value="@Magic" TValue="int" Change=@(i => csg.Magic = Magic * 1.0 / 1000)/>
                    <RadzenColorPicker @bind-Value=@Seed Change=@(c => csg.Seed = Seed)/>
                </ExtraControls>
            </SimplePieChart>
</td></tr></table>
@code {
    [Parameter]
    public Tour Tour { get; set; } = new Tour();

    private IEnumerable<(string Name, int Amount)> summary = new List<(string Name, int Amount)>()
    {
        ("A", 10)
    };

    private int Magic = -1;
    private string? Seed = null;
    private CSG csg = new();

    private UISettings settings = new();


    protected override async Task OnInitializedAsync()
    {
        settings = await engine.GetUISettings();
        summary = GetSpendingForStat();
        csg = new() { Magic = settings.Magic_Piechart_Color_Scheme_Number * 1.0 / 1000 };
    }

    protected override void OnParametersSet()
    {
        summary = GetSpendingForStat();
    }

    public IEnumerable<(string Name, int Amount)> GetSpendingForStat()
    {
        var ss = Tour.Spendings
        .Where(s => !s.Planned && !string.IsNullOrWhiteSpace(s.Type))
        ;
        Dictionary<string, long> summary = new Dictionary<string, long>();
        foreach (var s in ss)
        {
            if (!summary.ContainsKey(s.Type)) summary[s.Type] = 0;
            summary[s.Type] += s.AmountInCents;
        }
        return summary.DistinctBy(s => s.Key).OrderByDescending(s => s.Value).Select(s => (s.Key, (int)s.Value));
    } 

}
