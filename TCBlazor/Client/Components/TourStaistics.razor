@using TCalcCore.UI

@using TCalcCore.Engine
@inject TourcalcEngine engine

<!--
    1. spendings by category
    2. chart
-->
<table><tr><td style="padding: 5px; vertical-align: top; font-size: x-small;">
            <table>
            @foreach (var s in summary)
            {
                <tr><td align="left">@s.Name: </td><td> <b>@s.Amount.ToString("N0")</b></td></tr>
            }
            <tr><td align="left"><b>TOTAL:</b> </td><td align="right"> <b style="font-size: small">@(summary.Sum(s => s.Amount).ToString("N0"))</b></td></tr>
            </table>
        </td>
        <td style="padding: 5px; vertical-align: top;">
        <PieChart 
            Data="summary" 
            nextColorMultiplier=@(settings.Magic_Piechart_Color_Scheme_Number)
            ShowDebugUI=@(settings.Show_Debug_UI)
            />
</td></tr></table>
@code {
    [Parameter]
    public Tour Tour { get; set; } = new Tour();

    private IEnumerable<(string Name, int Amount)> summary = new List<(string Name, int Amount)>()
    {
        ("A", 10)
    };

    private UISettings settings = new();
    //private string StringOfLen()

    protected override async Task OnInitializedAsync()
    {
        settings = await engine.GetUISettings();
        summary = GetSpendingForStat();
    }

    protected override void OnParametersSet()
    {
        summary = GetSpendingForStat();
    }

    public IEnumerable<(string Name, int Amount)> GetSpendingForStat()
    {
        var ss = Tour.Spendings
        .Where(s => !s.Planned && !string.IsNullOrWhiteSpace(s.Type))
        ;
        Dictionary<string, long> summary = new Dictionary<string, long>();
        foreach (var s in ss)
        {
            if (!summary.ContainsKey(s.Type)) summary[s.Type] = 0;
            summary[s.Type] += s.AmountInCents;
        }
        return summary.DistinctBy(s => s.Key).OrderByDescending(s => s.Value).Select(s => (s.Key, (int)s.Value));
    } 

}
