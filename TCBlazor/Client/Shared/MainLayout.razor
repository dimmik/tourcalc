@using AntDesign

@inherits LayoutComponentBase
@implements IDisposable

@using TCalcCore.Engine
@inject TourcalcEngine engine

@inject IJSRuntime JS

@inject NavigationManager NavManager


<div class="page">
@if (engine.Auth == null)
{ 
//        <AntDesign.Modal
//                Visible=@true
//                Title="Check Auth"
//                Footer=@dummyFooter
//                >
                <div style="text-align:center">Checking auth</div>
//        </AntDesign.Modal>
    }
    else
    {

        if (!LoggingIn)
        {
            @if (engine.Auth.Type == "None")
            {
                <AntDesign.Modal
                Visible=@true
                Title="Log In"
                Footer=@dummyFooter
                >
                <span><input type="text" @bind-value="code" @onkeyup=@(async (e) => {
                    if (e.Code == "Enter" || e.Code == "NumpadEnter"){
                        //await JS.InvokeVoidAsync("alert", $"code: {code}");
                        await LogIn();
                    }
                })/>
                    <button @onclick="LogIn">Auth</button>
                </span>
                </AntDesign.Modal>
            }
            else
            {
                <Layout >
                    <Header Style="background-color: darkblue; color: white; padding: 4px; display: table; height: 30px; line-height: 30px;">
                        <div style="display: table-cell; align-content: flex-start; width: 65%; text-align: start;">
                            <a class="navbar-brand" style="margin: 3px; padding: 5px;" href="">
                                <span class="oi oi-home" aria-hidden="true"></span>
                            </a>&nbsp;&nbsp;
                            <span style="color:white; font-size: clamp(6px, 4vw, 18px);@(tour == null ? "" : "cursor:pointer;")" 
                                @onclick="OnTitleClick">
                                @(Title.Length > 2000 ? $"{Title.Substring(0, 17)}..." : Title)
                            </span>&nbsp;&nbsp;
                        </div>
                        <div style="display: table-cell; align-content: flex-end; width: 35%; text-align: end;">
                            <span><SyncStatusComponent/></span>
                            <span style="cursor:pointer; font-size: clamp(6px, 4vw, 18px); border:1px solid white" @onclick=@(async () => {
                                await LogOut();
                                NavManager.NavigateTo("/");
                            })>Log Out@($"{(engine.Auth.IsMaster ? " Admin" : "")}")</span>
                            &nbsp;&nbsp;
                            <a class="navbar-brand" style="margin: 3px; padding: 5px;" href="/settings">⚙</a>
                        </div>
                    </Header>
                    <Content Style="padding: 4px">@Body</Content>
                </Layout>
            }

        } 
        else
        {
            <AntDesign.Modal
                Visible=@true
                Title="Logging In"
                Footer=@dummyFooter
                >
                <div style="text-align:center">Logging In...</div>
                </AntDesign.Modal>
        }

}
</div>
<AntContainer/>
@code {
    private string? code;

    private bool LoggingIn = false;
    private string Title = "Wait...";
    private Tour? tour = null;

    protected override async Task OnInitializedAsync()
    {
        engine.onMessageReceived += OnMessageReceived;
        await engine.PickUpAuthInfo();
    }
    public void Dispose()
    {
        engine.onMessageReceived -= OnMessageReceived;
    }
    private Task OnMessageReceived(string type, object payload)
    {
        if (type == "Title")
        {
            Title = payload as string ?? "";
            StateHasChanged();
        }
        if (type == "Tour")
        {
            tour = payload as Tour;
            StateHasChanged();
        }
        return Task.CompletedTask;
    }
    private void OnTitleChange()
    {
        StateHasChanged();
    }
    private void OnTitleClick()
    {
        if (tour != null)
        {
            NavManager.NavigateTo($"/tour/{tour.Id}");
        }
    }
    private async Task LogOut()
    {
        await engine.LogOut();
    }
    private async Task LogIn()
    {
        LoggingIn = true;
        try {
            var scope = "code"; // "admin"
            var c = code;
            var scC = (code ?? "").Split(':');
            if (scC.Length > 1)
            {
                scope = scC[0];
                c = scC[1];
            }
            await engine.LogIn(scope, c);
        } 
        catch
        {
            // TODO handle
        }
        await engine.RequestClearLocalTourList(reloadFromServer: false);
        LoggingIn = false;
    }
    RenderFragment dummyFooter =
    @<span></span>
    ;
}
