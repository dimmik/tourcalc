@using TCBlazor.Client.Storage
@using TCBlazor.Client.Utils
@using TCalcCore.Auth
@inherits LayoutComponentBase
@inject HttpClient Http
@inject IJSRuntime JS
@inject TCBlazor.Client.Storage.TourcalcLocalStorage ts

<div class="page">
@if (authData == null)
{ // TODO beautify
        <span>Checking auth...</span>
    }
    else
    {
        if (!LoggingIn)
        {
            @if (authData.Type == "None")
            {
                <span><input type="text" @bind-value="code" />
                    <button @onclick="LogIn">Auth</button>
                </span>
            }
            else
            {
                <div class="sidebar">
                    <NavMenu />
                    <div style="color:white;cursor:pointer;" @onclick=@(() => LogOut())>Log Out</div>
                </div>

                <main>
                    <article class="content px-4">
                        @Body
                    </article>
                </main>
            }

        } 
        else
        {
            <span>Logging In ...</span>
        }

}
</div>
@code {
    private AuthData? authData = null;
    private string? code;

    private bool LoggingIn = false;

    protected override async Task OnInitializedAsync()
    {
        await RetrieveAuthData();
    }
    private async Task LogOut()
    {
        await ts.SetToken("");
        await RetrieveAuthData();
    }
    private async Task RetrieveAuthData()
    {
        var token = await ts.GetToken();
        authData = await Http.GetFromJsonWithAuthToken<AuthData?>("/api/Auth/whoami", token);
    }
    private async Task LogIn()
    {
        LoggingIn = true;
        try {
            var scope = "code"; // "admin"
            var c = code;
            var scC = (code ?? "").Split(':');
            if (scC.Length > 1)
            {
                scope = scC[0];
                c = scC[1];
            }
            var url = "/api/Auth/token/" + scope + "/" + c;
            var token = await Http.GetStringAsync(url);
            await ts.SetToken(token);
            await RetrieveAuthData();
        } 
        catch
        {
            // TODO handle
        }
        LoggingIn = false;
    }
    
}
