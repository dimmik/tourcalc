@using TCalc.Domain
@using TCBlazor.Client.Utils
<TableTemplate 
    Items=@(GetSpendingSorted()) 
    Context="spending" 
    TopPadding="30"
    ConditionalRowStyle=@((s, idx) => 
    {
        if (s.Planned){
            if (s.Description.StartsWith("Family")){
                return "background-color: aquamarine";
            } else {
                return "background-color: yellow";
            }
        } else {
            return $"background-color: {(idx % 2 == 0 ? "LightCyan" : "white")}";
        }
        //return "";
    })
>
    <TableHeader>
        <th>Spending Description <span style="cursor: pointer" @onclick=@(() => ShowPlanned = !ShowPlanned)>[@(ShowPlanned ? "-" : "+")]</span></th>
        <th>From</th>
        <th>Amount</th>
        <th>Recepients</th>
    </TableHeader>
    <RowTemplate>
        <td>
            @((MarkupString)spending.Description.AsBreakable())
            <div style="font-size: xx-small">[@spending.DateCreated.ToString("dd.MM.yyyy HH:mm")] <b>@spending.Type</b>
                @if (EditActionTemplate != null)
                {
                    <span>@EditActionTemplate(spending)</span>
                }
                </div>
        </td>
        <td>@((MarkupString)((Tour?.Persons ?? new List<Person>()).Where(p => p.GUID == spending.FromGuid).FirstOrDefault()?.Name ?? "").AsBreakable())</td>
        <td>@spending.AmountInCents</td>
        <td>@if (spending.ToAll)
            {
                <span style="background-color:green;color:yellow;font-size:xx-small">ALL</span>
            }    
            else 
            {
                <span style="font-size:xx-small">
                    @(
                        (MarkupString)string.Join(",",
                            spending
                            .ToGuid
                            .Select(g => (Tour?.Persons ?? new List<Person>())
                                    .Where(p => p.GUID == g)
                                    .FirstOrDefault()?.Name)
                             ).AsBreakable()
                     )
                </span>
                if (!spending.IsPartialWeighted && spending.ToGuid.Count > 1)
                {
                    <div style="color:darkcyan; font-size: xx-small"><b><i>NOT Weighted</i></b></div>
                }
            }
                </td>
    </RowTemplate>
</TableTemplate>

@code {
    [Parameter]
    public Tour? Tour { get; set; } = null;
    private bool ShowPlanned = false;
    protected override void OnInitialized()
    {
        ShowPlanned = Tour?.IsFinalizing ?? false;
    }
    [Parameter]
    public Func<IEnumerable<Spending>, IEnumerable<Spending>> SpendingListPreProcessor { get; set; } = (s) => s;

    public IEnumerable<Spending> GetSpendingSorted()
    {
        IEnumerable<Spending> res = (Tour?.Spendings ?? new List<Spending>());
        var planned = res.Where(s => s.Planned);
        var real = res.Where(s => !s.Planned);
        planned = planned
            .OrderBy(s => s.Description.StartsWith("Family") ? 0 : 1) // first family
            .ThenBy(s => (Tour?.Persons ?? new List<Person>()).FirstOrDefault(p => p.GUID == s.FromGuid)?.Name ?? "") // then by name
            .ThenByDescending(s => s.AmountInCents) // then by amount
            ;
        real = real.OrderBy(s => s.DateCreated);

        return SpendingListPreProcessor((ShowPlanned ? planned : new Spending[0]).Concat(real).ToList());
    }

    [Parameter]
    public RenderFragment<Spending>? EditActionTemplate { get; set; }
}
