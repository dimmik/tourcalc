@using TCalc.Domain
<TableTemplate Items=@(GetSpendingSorted()) Context="spending" TopPadding="30">
    <TableHeader>
        <th>Spending Description</th>
        <th>From</th>
        <th>Amount</th>
        <th>Recepients</th>
    </TableHeader>
    <RowTemplate>
        <td>@spending.Description</td>
        <td>@((Tour?.Persons ?? new List<Person>()).Where(p => p.GUID == spending.FromGuid).FirstOrDefault()?.Name)</td>
        <td>@spending.AmountInCents</td>
        <td>@if (spending.ToAll)
            {
                <span style="background-color:green;color:yellow;font-size:xx-small">ALL</span>
            }    
            else 
            {
                <span style="font-size:xx-small">
                    @(
                        string.Join(",",
                            spending
                            .ToGuid
                            .Select(g => (Tour?.Persons ?? new List<Person>())
                                    .Where(p => p.GUID == g)
                                    .FirstOrDefault()?.Name)
                             )
                     )
                 </span>
            }
                </td>
    </RowTemplate>
</TableTemplate>

@code {
    [Parameter]
    public Tour? Tour { get; set; } = null;
    public List<Spending> GetSpendingSorted()
    {
        List<Spending> res = Tour?.Spendings ?? new List<Spending>();
        var planned = res.Where(s => s.Planned);
        var real = res.Where(s => !s.Planned);
        planned = planned
            .OrderBy(s => (Tour?.Persons ?? new List<Person>()).FirstOrDefault(p => p.GUID == s.FromGuid)?.Name ?? "")
            .ThenByDescending(s => s.AmountInCents)
            ;
        real = real.OrderBy(s => s.DateCreated);

        return planned.Concat(real).ToList();
    }
}
