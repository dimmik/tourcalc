@inject HttpClient Http
@inject TCBlazor.Client.Storage.TourcalcLocalStorage ts
@inject IJSRuntime JsRuntime

<TableTemplate 
    Items=@(GetSpendingSorted()) 
    Context="spending" 
    TopPadding="30"
    ConditionalRowStyle=@((s, idx) => 
    {
        if (s.Planned){
            if (s.Description.StartsWith("Family")){
                return "background-color: aquamarine";
            } else {
                return "background-color: yellow";
            }
        } else {
            return $"background-color: {(idx % 2 == 0 ? "LightCyan" : "white")}";
        }
        //return "";
    })
>
    <TableHeader>
        <th>
            <span style="cursor:pointer" @onclick=@(() => ToggleSorting(SortingField.Descr))>Spending Description &nbsp;</span>
                        
            <span style="cursor:pointer" @onclick=@(() => ToggleSorting(SortingField.Date))>Dt&nbsp;</span>
            <span style="cursor:pointer" @onclick=@(() => ToggleSorting(SortingField.Type))>Cat&nbsp;</span>
            &nbsp; <span style="cursor: pointer" @onclick=@(() => ShowPlanned = !ShowPlanned)>[@(ShowPlanned ? "-" : "+")]</span>
            </th>
        <th><span style="cursor:pointer" @onclick=@(() => ToggleSorting(SortingField.From))>From</span></th>
        <th><span style="cursor:pointer" @onclick=@(() => ToggleSorting(SortingField.Amount))>Amount</span></th>
        <th>Recepients</th>
    </TableHeader>
    <RowTemplate>
        <td>
            @if (!spending.Planned)
            {
                <span style="cursor:pointer;" 
                @onclick=@(() => OnSpendingDeleteClicked(spending))>
                <b>X&nbsp;</b>
                </span>
            }

            @((MarkupString)spending.Description.AsBreakable())
            <div style="font-size: xx-small">[@spending.DateCreated.ToString("dd.MM.yyyy HH:mm")] <b>@spending.Type</b>
                @if (EditActionTemplate != null)
                {
                    <span>@EditActionTemplate(spending)</span>
                }
                </div>
        </td>
        <td>@((MarkupString)((Tour?.Persons ?? new List<Person>()).Where(p => p.GUID == spending.FromGuid).FirstOrDefault()?.Name ?? "").AsBreakable())</td>
        <td>@spending.AmountInCents</td>
        <td>@if (spending.ToAll)
            {
                <span style="background-color:green;color:yellow;font-size:xx-small">ALL</span>
            }    
            else 
            {
                <span style="font-size:xx-small">
                    @(
                        (MarkupString)string.Join(",",
                            spending
                            .ToGuid
                            .Select(g => (Tour?.Persons ?? new List<Person>())
                                    .Where(p => p.GUID == g)
                                    .FirstOrDefault()?.Name)
                             ).AsBreakable()
                     )
                </span>
                if (!spending.IsPartialWeighted && spending.ToGuid.Count > 1)
                {
                    <div style="color:darkcyan; font-size: xx-small"><b><i>NOT Weighted</i></b></div>
                }
            }
                </td>
    </RowTemplate>
</TableTemplate>

@code {
    [Parameter]
    public Tour? Tour { get; set; } = null;
    private bool ShowPlanned = false;
    protected override void OnParametersSet()
    {
        ShowPlanned = Tour?.IsFinalizing ?? false;
        InitSortPredicates();
    }
    private void InitSortPredicates()
    {
        sortPredicates[SortingField.From] = (s) => (Tour?.Persons?.FirstOrDefault(p => p.GUID == s.FromGuid)?.Name ?? "");
        sortPredicates[SortingField.Amount] = (s) => s.AmountInCents.ToString("00000000000000");
        sortPredicates[SortingField.Descr] = (s) => s.Description;
        sortPredicates[SortingField.Date] = (s) => $"{s.DateCreated: yyyyMMdd_HHmmss}";
        sortPredicates[SortingField.Type] = (s) => string.IsNullOrWhiteSpace(s.Type) ? new string(Char.MaxValue, 1) : s.Type;
    }
    [Parameter]
    public Func<IEnumerable<Spending>, IEnumerable<Spending>> SpendingListPreProcessor { get; set; } = (s) => s;

    private SortingField? sortingField = null;
    private SortingType sortingType = SortingType.Asc;
    private void ToggleSorting(SortingField field)
    {
        if (sortingField != field)
        {
            sortingField = field;
            sortingType = SortingType.Asc;
        } 
        else
        {
            if (sortingType == SortingType.Asc){
                sortingType = SortingType.Desc;
            } else 
            {
                sortingField = null;
            }
        }
    }
    private IEnumerable<Spending> SortByPredicate(IEnumerable<Spending> seq, SortingType st, Func<Spending, string> predicate)
    {
        if (st == SortingType.Asc)
        {
            return seq.OrderBy(s => !s.Planned).ThenBy(predicate);
        } else
        {
            return seq.OrderBy(s => !s.Planned).ThenByDescending(predicate);                
        }
    }

    Dictionary<SortingField, Func<Spending, string>> sortPredicates = new Dictionary<SortingField, Func<Spending, string>>();

    private IEnumerable<Spending> FieldSort(IEnumerable<Spending> seq)
    {

        



        if (sortingField == null) return seq;
        if (sortPredicates.ContainsKey(sortingField.Value))
        {
            return SortByPredicate(seq, sortingType, sortPredicates[sortingField.Value]);
        }
        return seq;
    }
    public IEnumerable<Spending> GetSpendingSorted()
    {
        IEnumerable<Spending> res = (Tour?.Spendings ?? new List<Spending>());
        var planned = res.Where(s => s.Planned);
        var real = res.Where(s => !s.Planned);
        planned = planned
            .OrderBy(s => s.Description.StartsWith("Family") ? 0 : 1) // first family
            .ThenBy(s => (Tour?.Persons ?? new List<Person>()).FirstOrDefault(p => p.GUID == s.FromGuid)?.Name ?? "") // then by name
            .ThenByDescending(s => s.AmountInCents) // then by amount
            ;
        real = real.OrderBy(s => s.DateCreated);

        var preprocessed = SpendingListPreProcessor((ShowPlanned ? planned : new Spending[0]).Concat(real).ToList());
        var sorted = FieldSort(preprocessed);

        return sorted;
    }

    [Parameter]
    public RenderFragment<Spending>? EditActionTemplate { get; set; }

    [Parameter]
    public Func<Spending, Task> OnSpendingDelete { get; set; } = async (s) => { };

    async Task OnSpendingDeleteClicked(Spending s)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Delete spending '{s.Description}'");
        if (confirmed)
        {
            await OnSpendingDelete(s);
        }
    }
    enum SortingType
    {
        Asc, Desc
    }
    enum SortingField
    {
        From, Descr, Date, Type, Amount
    }
}
