@inject IJSRuntime JsRuntime

<Form 
        Model="TheSpending"
        Layout="@FormLayout.Horizontal"
        Size="@AntSizeLDSType.Small"
        LabelColSpan="4"
        WrapperColSpan="12"
        

    >
        <FormItem Label="Description" Style="margin-bottom: 1px" LabelStyle="padding: 0 !important">
            <Input @bind-Value=@(TheSpending.Description)/>
        </FormItem>
        <FormItem Label="Amount" Style="margin-bottom: 1px;">
            <Input @bind-Value=@(TheSpending.AmountInCents) />
         </FormItem>

        <FormItem Label="Category" Style="margin-bottom: 1px;">
            <Select
                @bind-Value=@(TheSpending.Type)
                TItemValue="string"
		        TItem="string"
                AllowClear=@true
                DropdownRender=@CategoryDropdownRenderer
                >
                <SelectOptions>
			            @foreach(var c in SpendingCategories)
			            {
				            <SelectOption TItemValue="string" TItem="string" Value=@c Label=@c />
			            }
		            </SelectOptions>
            </Select>
        </FormItem>
        <FormItem Label="From" Style="margin-bottom: 1px">
            <Select
                OnSelectedItemChanged="OnFromSelectedChangedHandler"
                @bind-Value=@(TheSpending.FromGuid)
                TItemValue="string"
		        TItem="string"
                Placeholder="From"
                DefaultActiveFirstItem="false" 
                AllowClear=@true
            >
                    <SelectOptions>
			            @foreach(var p in tour.Persons)
			            {
				            <SelectOption TItemValue="string" TItem="string" Value=@p.GUID Label=@p.Name />
			            }
		            </SelectOptions>
            </Select>
        </FormItem>
        <FormItem Label="To All" Style="margin-bottom: 1px">
            <Switch @bind-Value=@(TheSpending.ToAll)></Switch>
        </FormItem>
        <FormItem Label="To" Style="margin-bottom: 1px">
            <Select Mode="multiple"
                Placeholder="To..."
		        @bind-Values="@_selectedValuesTo"
		        TItemValue="string"
		        TItem="string"
                OnSelectedItemsChanged="OnToPersonsChangedHandler"
                Disabled=@(TheSpending.ToAll)
		        AllowClear>
		            <SelectOptions>
			            @foreach(var p in tour.Persons)
			            {
				            <SelectOption TItemValue="string" TItem="string" Value=@p.GUID Label=@p.Name />
			            }
		            </SelectOptions>
            </Select>
        </FormItem>
        <FormItem Style="margin-bottom: 1px">
                <Button Type="@ButtonType.Primary" Loading=@ShowInProgress @onclick=@(async () => await SaveSpending())>
                    @($"{(IsItANewSpending() ? "Submit" : "Submit")}")
                </Button>
                <Button Danger=@true @onclick=@(() => OnCancel())>
                    Cancel
                </Button>

        </FormItem>
    </Form>

@code {
    [Parameter]
    public Spending TheSpending { get; set; } = new Spending();

    [Parameter]
    public Tour tour { get; set; } = new Tour();

    [Parameter]
    public Func<Spending, Task> OnSave { get; set; } = async (s) => { };

    [Parameter]
    public Action OnCancel { get; set; } = () => { };


    [Parameter]
    public Action<string> OnFromChanged { get; set; } = (s) => { };

    private bool IsItANewSpending()
    {
        return !tour.Spendings.Any(s => !s.Planned && s.GUID == TheSpending.GUID);
    }

    private List<string> SpendingCategories = new List<string>();


    protected override void OnParametersSet()
    {
        _selectedValuesTo = TheSpending.ToGuid;
        SpendingCategories = (tour?.Spendings?.Where(s => !string.IsNullOrWhiteSpace(s.Type)).Select(s => s.Type)?.Distinct() ?? new string[0]).ToList();
    }

    IEnumerable<string> _selectedValuesTo = new List<string>();

    private void OnToPersonsChangedHandler(IEnumerable<string> values)
    {
        if (values != null){
            //Console.WriteLine($"selected: ${string.Join(",", values)}");
            TheSpending.ToGuid = values.ToList();
        }
    }

    public void OnFromSelectedChangedHandler(string v)
    {
        OnFromChanged(v);
    }
    bool ShowInProgress = false;
    private async Task SaveSpending()
    {
        List<string> err = new List<string>();
        if (TheSpending.AmountInCents == 0)
        {
            err.Add("Amount should not be 0");
        }
        if (string.IsNullOrWhiteSpace(TheSpending.Description))
        {
            err.Add("Please Specify Description");
        }
        if (!TheSpending.ToAll && (TheSpending.ToGuid ?? new List<string>()).Count == 0)
        {
            err.Add("Spending should have recepients or be to all");
        }
        if (string.IsNullOrWhiteSpace(TheSpending.FromGuid))
        {
            err.Add("FROM is empty");
        }
        if (err.Count == 0)
        {
            ShowInProgress = true;
            await OnSave(TheSpending);
            ShowInProgress = false;
        } else
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Errors: {string.Join("\n", err)}");
        }
    }


    private string _cname;
    private void AddCatToList(MouseEventArgs args)
    {
        if (!string.IsNullOrWhiteSpace(_cname))
        {
            SpendingCategories.Add(_cname);
            _cname = string.Empty;
	   }
    }
    private RenderFragment CategoryDropdownRenderer(RenderFragment originNode)
    {
        RenderFragment customDropdownRender =
            @<Template>
                <div>
                    @originNode
                    <Divider Style="margin: 4px 0"></Divider>
                    <div style="display: flex; flex-wrap: nowrap; padding: 8px">
                        <Input Style="flex: auto" @bind-Value="@_cname"/>
                        <a style="flex: none; padding: 8px; display: block; cursor: pointer" @onclick="AddCatToList">
                            <Icon Type="plus" Theme="outline"></Icon>
                            Add Category
                        </a>
                    </div>
                </div>
            </Template>;

        return customDropdownRender;
    }

}
