@page "/tour/{tourId}"
@using TCBlazor.Client.Storage;

@inject EnrichedHttpClient Http
@inject TourcalcLocalStorage ts
@inject IJSRuntime JsRuntime

@if (Tour == null)
{
    <span>Tour loading...</span>
}
else
{
    <PageTitle>@Tour.Name</PageTitle>
<h3>@Tour.Name (
    <span style="cursor:pointer; color: blue; border: solid 1px black" @onclick=@(() => ShowStatistics = !ShowStatistics)>@($"{(ShowStatistics ? "hide" : "show")}") stats</span>
    )</h3>     
@if (ShowStatistics)
{
        <TourStaistics Tour=@Tour/>
}
    <TableTemplate Items=@(new string[1]) TopPadding="0">
        <TableHeader>
            <th>
                <a href=@GetHref("persons")>Persons</a>
                <a href=@GetHref("spendings")>Spendings</a>
            </th>
        </TableHeader>
        <RowTemplate>
            <td>
                <!--Persons-->
                <b id=@GetId("persons")>Persons</b>
                <TourPersonsComponent 
                    Tour=@Tour
                    OnPersonDelete=@(async (p) => {
                        await Http.CallWithAuthToken<string>($"/api/Tour/{Tour.Id}/person/{p.GUID}", await ts.GetToken(), HttpMethod.Delete, null);
                        await LoadTour();
                        StateHasChanged();
                    })
                    OnPersonEdit=@(async (p) => {
                        await Http.CallWithAuthToken<string>($"/api/Tour/{Tour.Id}/person/{p.GUID}", await ts.GetToken(), HttpMethod.Patch, p);
                        await LoadTour();
                        StateHasChanged();
                    })
                    OnPersonAdd=@(async (p) => {
                        await Http.CallWithAuthToken<string>($"/api/Tour/{Tour.Id}/person", await ts.GetToken(), HttpMethod.Post, p);
                        await LoadTour();
                        StateHasChanged();
                    })
                    />
                <!--Spendings-->
                <b id=@GetId("spendings")>Spendings</b>
                <TourSpendingsComponent 
                    Tour=@Tour
                    ShowPlanned=@ShowPlannedSpendings
                    OnToggleShowPlanned=@(() => {
                        ShowPlannedSpendings = !ShowPlannedSpendings;
                        StateHasChanged();
                    })
                    OnSpendingDelete=@(async (s) => {
                        await Http.CallWithAuthToken<string>($"/api/Tour/{Tour.Id}/spending/{s.GUID}", await ts.GetToken(), HttpMethod.Delete, null);
                        await LoadTour();
                        StateHasChanged();
                    })
                >
                    <EditActionTemplate Context="s">
                            @if (s.Planned)
                            {
                                <b style="font-size: x-large; cursor:pointer;" @onclick=@(async () => {
                                    bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Add planned '{s.Description}' : {s.AmountInCents}?");
                                    if (confirmed)
                                    {
                                        await Http.CallWithAuthToken<string>($"/api/Tour/{Tour.Id}/spending", await ts.GetToken(), HttpMethod.Post, s);
                                        await LoadTour();
                                        StateHasChanged();
                                    }
                                })>+</b>
                            }
                            else
                            {
                            <NavLink href=@($"/tour/{Tour.Id}/spending/edit/{s.GUID}")>&nbsp; 
                                <span style="border:solid 1px black">edit</span>                    
                            </NavLink>
                            }
                    </EditActionTemplate>
                </TourSpendingsComponent>
            </td>
        </RowTemplate>

    </TableTemplate>
}
<AnchorNavigation />
@code {
    [Parameter]
    public string? TourId { get; set; }

    private bool ShowStatistics = false;
    private bool ShowPlannedSpendings = false;

    public Tour? Tour = null;
    protected override async Task OnParametersSetAsync()
    {
        await LoadTour();
        ShowPlannedSpendings = (Tour?.IsFinalizing ?? false);
    }
    private async Task LoadTour()
    {
        var token = await ts.GetToken();
        Tour = await Http.CallWithAuthToken<Tour>($"/api/Tour/{TourId}/suggested", token);
    }
    string GetId(string l) => $"{l}";
    string GetHref(string l) => $"/tour/{TourId}#" + GetId(l);
}
