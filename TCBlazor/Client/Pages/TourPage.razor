@page "/tour/{tourId}"
@page "/tour/{tourId}/persons"
@page "/tour/{tourId}/spendings"

@implements IDisposable

@using TCalc.Logic

@using TCalcCore.Engine
@inject TourcalcEngine engine

@inject TCalcCore.Network.EnrichedHttpClient hClient;
@inject ITokenStorage tokenStorage;

@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager

@if (tour == null)
{
    <span>Tour loading...</span>
}
else
{
    engine.SendMessage("Title", tour.Name);
    engine.SendMessage("Tour", tour);
    <PageTitle>@tour.Name</PageTitle>
    <h3>
        <span style="cursor:pointer;font-size:large;" @onclick=@(async () => {
          IsTourReloading = true;
          await engine.RequestTourLoad(TourId, forceLoadFromServer: true);
          IsTourReloading = false;
          })>&nbsp;@(IsTourReloading ? "..." : "⟳")&nbsp;</span>
        <span>@tour.Name</span>
        <Button @onclick=@(() => ShowStatistics = !ShowStatistics)>@($"{(ShowStatistics ? "x" : "")}") ⓘ</Button>
    
        @{
            /*                <Button Type="primary" Size="large" Danger=@true @onclick=@(() => NavManager.NavigateTo($"/tour/{tour?.Id}/spending/add/"))>SPEND</Button>*/
        }
    
       
    </h3>
@if (ShowStatistics)
{
    <div style="font-size:x-small; border: 1px solid black">
            @(isFresh ? "From Server" : "Local") <b>@($"{storedDt:yyyy-MM-dd HH:mm:ss}")</b> 
            
        </div>
        <Timechart tour="tourLocal" open="false" ButtonText="Spendings By Date"/>
        @if (settings.Web_Push_Notifications)
        {
            @if (subscriptionChecked == true){
            <Button Type="primary"
                    Size="small"
                    Danger=@false
                    @onclick=@(() => NotificationSubscriptionAsync(isSubscribed))>
                @(isSubscribed ? "Unscubscribe" : "Subscribe")
            </Button>
            } else {
                if (subscriptionChecked == null){
                    <span style="border: 1px solid grey">Checking subscription ...</span>
                } else {
                    <span style="border: 1px solid grey; cursor: pointer;" @onclick=@CheckIfSubscribed>Cant check subscription. Recheck.</span>
                }
            }
        }
        <span> @{/*currency and link*/}
            &nbsp;| &nbsp;
            <span style="font-size: x-small">(<CurrenciesEditInModal tour=@tour />)</span>
            &nbsp;| &nbsp;
            <span style="font-size: x-small; text-decoration: underline;"><a href=@($"/goto/{tour.AccessCodeMD5}/{tour.Id}")>link</a></span>
        </span>
    <div style="width: 100%; display:flex; align-items:center; justify-content:center;">
        <div style="margin:auto">
        <TourStaistics Tour=@tourLocal/>
        </div>
    </div>
}
    <TableTemplate Items=@(new string[1]) TopPadding="0">
         <RowTemplate>
            <td>
                <div style="width: 100%; display: table">
                    <div style="display: table-cell; width: 50%; align-content: flex-start; text-align: start; white-space: nowrap;">
                        <!--Persons-->
                        <b id=@GetId("persons")>Persons [@tour.Persons.Count]</b>
                        <Button Type="primary" Ghost Size="small" @onclick=@(() => ShowPersons = !ShowPersons)>@(ShowPersons ? "hide" : "show")</Button>
                        <!-- choose local currency -->
                         <Select @bind-Value=@(curr)
                                 TItemValue="Currency"
                                 TItem="Currency"
                                 LabelName="@nameof(Currency.Name)"
                                 AllowClear=@true
                                 Style="width: 80px;"
                                 DataSource="tour?.Currencies ?? new Currency[0]"
                                 OnSelectedItemChanged="() => tourLocal = GetTourInCurrency(tourLocal)"
                                 OnClearSelected="() => {curr = tour?.Currency; tourLocal = GetTourInCurrency(tourLocal);}"
                                 IgnoreItemChangesLeadsToException="false" />
                    </div>
                    <div style="display: table-cell; width: 50%; align-content: flex-end; text-align: end;">
                        <a href=@GetHref("spendings")>Spendings</a>
                        <Button Type="primary" Size="small" Danger=@true @onclick=@(() => NavManager.NavigateTo($"/tour/{tour?.Id}/spending/add/"))>SPEND</Button>
                    </div>
                </div>
                @if (ShowPersons)
                {
                    <TourPersonsComponent 
                    tour=@tourLocal
                    OnPersonDelete=@(async (p) => {
                        _ = engine.RequestDeletePerson(tour.Id, p);
                    })
                    OnPersonEdit=@(async (p) => {
                        _ = engine.RequestEditPerson(tour.Id, p);
                    })
                    OnPersonAdd=@(async (p) => {
                        //await dataSvc.AddPerson(tour.Id, p, OnTourStored);
                        _ = engine.RequestAddPerson(tour.Id, p);
                    })
                    />
                }
                <!--Spendings-->
                <div style="width: 100%; display: table">
                <div style="display: table-cell; width: 40%; align-content: flex-start; text-align: start;">
                    <b id=@GetId("spendings")>Spendings [@tour.Spendings.Where(s => !s.Planned).Count()]</b>
                    <Button Type="primary" Ghost Size="small" @onclick=@(() => ShowSpendings = !ShowSpendings)>@(ShowSpendings ? "hide" : "show")</Button>
                </div>
                <div style="display: table-cell; width: 60%; align-content: flex-end; text-align: end;">
                    <a href=@GetHref("persons")>Persons</a>
                    <Button Type="primary" Size="small" Danger=@true @onclick=@(() => NavManager.NavigateTo($"/tour/{tour?.Id}/spending/add/"))>SPEND</Button>
                </div>
                </div>
                @if (ShowSpendings){
                    <TSpComponent 
                        Tour=@tourLocal
                        ShowPlanned=@ShowPlannedSpendings
                        OnToggleShowPlanned=@(() => {
                            // TODO works slow. Think about it
                            ShowPlannedSpendings = !ShowPlannedSpendings;
                            StateHasChanged();
                        })
                        OnSpendingDelete=@(async (s) => {
                            _ = engine.RequestDeleteSpending(tour.Id, s);
                        })
                    >
                        <EditActionTemplate Context="s">
                                @if (s.Planned)
                                {
                                    <Button Danger Size="small" @onclick=@(async () => {
                                        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Add planned '{s.Description}' : {s.AmountInCents}?");
                                        if (confirmed)
                                        {
                                            var ss = s.SafeClone<Spending>();
                                            ss.Type = "";
                                            ss.Color = ss.Description.StartsWith("X") ? "lightgreen" : "lightgray";
                                            _ = engine.RequestAddSpending(tour.Id, ss);
                                        }
                                    })>+</Button>
                                }
                                else
                                {
                                    <SpendingEditInModal spending=@s tour=@tour @key=@($"sp_ed_mod_{s.GUID}")/>
                                <NavLink href=@($"/tour/{tour.Id}/spending/edit/{s.GUID}")>&nbsp; 
                                    <span style="border:solid 1px black">-&gt;</span>                    
                                </NavLink>
                                }
                        </EditActionTemplate>
                    </TSpComponent>
                }
            </td>
        </RowTemplate>

    </TableTemplate>
}
<AnchorNavigation />
@code {
    [Parameter]
    public string? TourId { get; set; }

    private bool ShowStatistics = false;
    private bool ShowPlannedSpendings = false;
    private bool IsTourReloading = false;
    private bool initialized = false;

    private bool ShowPersons = true;
    private bool ShowSpendings = true;

    public Tour? tour = null;
    public Tour? tourLocal = null;
    private Currency? curr = null;
    private bool isFresh = false;
    private DateTimeOffset storedDt = DateTimeOffset.Now;

    private UISettings settings = new UISettings();
    public bool isSubscribed = false;
    public bool? subscriptionChecked = null;

    protected override async Task OnInitializedAsync()
    {
        settings = await engine.GetUISettings();

        // subscribe to tour loaded event
        engine.onTourLoaded += OnTourLoaded;
        // send command to load tour with certain id
        _ = engine.RequestTourLoad(TourId);
        if (settings.Web_Push_Notifications)
        {
            _ = CheckIfSubscribed();
        }
    }

    async Task CheckIfSubscribed()
    {
        // check is we are subscribed to this tour
        // check notifications
        subscriptionChecked = null;
        bool isAllowed = await JsRuntime.InvokeAsync<bool>("checkNotificationAllowed", null);
        bool httpError = false;
        if (isAllowed)
        {
            var token = await tokenStorage.GetToken();
            var pKey = await hClient.CallWithAuthToken<string>($"api/subscription/publickey", token, HttpMethod.Get, null, (m) => { httpError = true; });
            if (!httpError)
            {
                var subscription = await JsRuntime.InvokeAsync<NotificationSubscription>("blazorPushNotifications.requestSubscription", pKey);
                var subscribed = await hClient.CallWithAuthToken<bool>($"api/subscription/check/{tour.Id}", token, HttpMethod.Post, subscription, (m) => { httpError = true; });
                isSubscribed = subscribed;
            }
        }
        //await Task.Delay(5000);
        subscriptionChecked = !httpError ? true : false;
        StateHasChanged();
    }

    async Task NotificationSubscriptionAsync(bool subscribed)
    {
        var token = await tokenStorage.GetToken();
        var pKey = await hClient.CallWithAuthToken<string>($"api/subscription/publickey", token, HttpMethod.Get, null, (m) => { });
        var subscription = await JsRuntime.InvokeAsync<NotificationSubscription>("blazorPushNotifications.requestSubscription", pKey);
        if (subscription != null)
        {
            if (subscribed)
            {
                // unsubscribe
                var ok = await hClient.CallWithAuthToken<string>($"api/subscription/unsubscribe/{tour.Id}", token, HttpMethod.Post, subscription, (m) => { });
                isSubscribed = false;
            }
            else
            {
                // store for this tour id - call notifications/subscribe/{tourid} for the subscription
                var ok = await hClient.CallWithAuthToken<string>($"api/subscription/subscribe/{tour.Id}", token, HttpMethod.Post, subscription, (m) => { });
                isSubscribed = true;
            }
        }
    }



    public void Dispose()
    {
        engine.onTourLoaded -= OnTourLoaded;
    }
    private Tour GetTourInCurrency(Tour t)
    {
        if (curr == null) return t;
        var calc = new TourCalculator(t, curr);
        return calc.SuggestFinalPayments();
    }
    private Task OnTourLoaded(Tour t, bool isFromServer, DateTimeOffset updated)
    {
        isFresh = isFromServer;
        storedDt = updated;
        if (curr == null) // only if we have not used the curr yet
        {
            curr = t.Currency;
        }
        tour = t;
        tourLocal = tour.SafeClone<Tour>();
        tourLocal = GetTourInCurrency(tourLocal);
        if (!initialized)
        {
            ShowPlannedSpendings = (tour?.IsFinalizing ?? false) && !(tour?.IsArchived ?? false);
            initialized = true;
        }
        StateHasChanged();
        return Task.CompletedTask;
    }
    private Task OnTourStored(bool storedOnServer)
    {
        if (storedOnServer)
        {
            _ = engine.RequestTourLoad(TourId, forceLoadFromServer: true);
        } else
        {
            _ = engine.RequestTourLoad(TourId, forceLoadFromServer: false, forceLoadFromLocalStorage: true);
        }
        StateHasChanged();
        return Task.CompletedTask;
    }
    string GetId(string l) => $"{l}";
    string GetHref(string l) => $"/tour/{TourId}#" + GetId(l);
}
