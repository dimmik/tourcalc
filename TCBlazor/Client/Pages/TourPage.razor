@page "/tour/{tourId}"

@using TCalcCore.Network
@inject TCDataSyncService dataSync

@using TCalcCore.UI
@inject TCGlobal tcGlobal

@using TCalcCore.Engine
@inject TourcalcEngine engine

@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager

@if (tour == null)
{
    <span>Tour loading...</span>
}
else
{
    <PageTitle>@tour.Name</PageTitle>
<h3>@tour.Name 
    <Button @onclick=@(() => ShowStatistics = !ShowStatistics)>@($"{(ShowStatistics ? "hide" : "show")}") info</Button>
    <span style="cursor:pointer;font-size:large;" @onclick=@(async () => {
                    IsTourReloading = true;
                    await engine.RequestTourLoad(TourId, forceLoadFromServer: true);
                    IsTourReloading = false;
                })>&nbsp;@(IsTourReloading ? "..." : "⟳")&nbsp;</span>
    </h3>     
@if (ShowStatistics)
{
        <TourStaistics Tour=@tour/>
}
    <TableTemplate Items=@(new string[1]) TopPadding="0">
        <TableHeader>
            <th>
                <a href=@GetHref("persons")>Persons</a>
                <a href=@GetHref("spendings")>Spendings</a>
                
                <Button Type="primary" Size="small" Danger=@true @onclick=@(() => NavManager.NavigateTo($"/tour/{tour?.Id}/spending/add/"))>SPEND</Button>
            </th>
        </TableHeader>
        <RowTemplate>
            <td>
                <!--Persons-->
                <b id=@GetId("persons")>Persons</b>
                <TourPersonsComponent 
                    Tour=@tour
                    OnPersonDelete=@(async (p) => {
                        _ = engine.RequestDeletePerson(tour.Id, p);
                    })
                    OnPersonEdit=@(async (p) => {
                        _ = engine.RequestEditPerson(tour.Id, p);
                    })
                    OnPersonAdd=@(async (p) => {
                        //await dataSvc.AddPerson(tour.Id, p, OnTourStored);
                        _ = engine.RequestAddPerson(tour.Id, p);
                    })
                    />
                <!--Spendings-->
                <b id=@GetId("spendings")>Spendings</b>
                <TourSpendingsComponent 
                    Tour=@tour
                    ShowPlanned=@ShowPlannedSpendings
                    OnToggleShowPlanned=@(() => {
                        // TODO works slow. Think about it
                        ShowPlannedSpendings = !ShowPlannedSpendings;
                        StateHasChanged();
                    })
                    OnSpendingDelete=@(async (s) => {
                        _ = engine.RequestDeleteSpending(tour.Id, s);
                    })
                >
                    <EditActionTemplate Context="s">
                            @if (s.Planned)
                            {
                                <b style="font-size: x-large; cursor:pointer;" @onclick=@(async () => {
                                    bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Add planned '{s.Description}' : {s.AmountInCents}?");
                                    if (confirmed)
                                    {
                                        var ss = s.SafeClone<Spending>();
                                        ss.Type = "";
                                        _ = engine.RequestAddSpending(tour.Id, ss);
                                    }
                                })>+</b>
                            }
                            else
                            {
                            <NavLink href=@($"/tour/{tour.Id}/spending/edit/{s.GUID}")>&nbsp; 
                                <span style="border:solid 1px black">edit</span>                    
                            </NavLink>
                            }
                    </EditActionTemplate>
                </TourSpendingsComponent>
            </td>
        </RowTemplate>

    </TableTemplate>
}
<AnchorNavigation />
@code {
    [Parameter]
    public string? TourId { get; set; }

    private bool ShowStatistics = false;
    private bool ShowPlannedSpendings = false;
    private bool IsTourReloading = false;
    private bool initialized = false;

    public Tour? tour = null;
    protected override void OnInitialized()
    {
        // subscribe to tour loaded event
        engine.onTourLoaded += OnTourLoaded;
        // send command to load tour with certain id
        _ = engine.RequestTourLoad(TourId);
    }
    private Task OnTourLoaded(Tour t, bool isFromServer)
    {
        tour = t;
        tcGlobal.Title = $"{tour?.Name ?? "n/a"}";
        tcGlobal.Tour = tour;
        if (!initialized)
        {
            ShowPlannedSpendings = (tour?.IsFinalizing ?? false);
            initialized = true;
        }
        StateHasChanged();
        return Task.CompletedTask;
    }
    private Task OnTourStored(bool storedOnServer)
    {
        if (storedOnServer)
        {
            _ = engine.RequestTourLoad(TourId, forceLoadFromServer: true);
        } else
        {
            _ = engine.RequestTourLoad(TourId, forceLoadFromServer: false, forceLoadFromLocalStorage: true);
        }
        StateHasChanged();
        return Task.CompletedTask;
    }
    string GetId(string l) => $"{l}";
    string GetHref(string l) => $"/tour/{TourId}#" + GetId(l);
}
