@page "/tour/{tourId}"
@using TCBlazor.Client.Utils
@using TCalc.Domain
@inject HttpClient Http
@inject TCBlazor.Client.Storage.TourcalcLocalStorage ts

@if (Tour == null)
{
    <span>Tour loading...</span>
}
else
{
    <PageTitle>@Tour.Name</PageTitle>
<h3>@Tour.Name</h3>

<TourStaistics Tour=@Tour/>

    <TableTemplate Items=@(new string[1]) TopPadding="0">
        <TableHeader>
            <th>
                <a href=@GetHref("persons")>Persons</a>
                <a href=@GetHref("spendings")>Spendings</a>
            </th>
        </TableHeader>
        <RowTemplate>
            <td>
                <!--Persons-->
                <b id=@GetId("persons")>Persons</b>
                <TourPersonsComponent 
                    Tour=@Tour
                    OnPersonDelete=@(async (p) => {
                        await Http.CallWithAuthToken<string>($"/api/Tour/{Tour.Id}/person/{p.GUID}", await ts.GetToken(), HttpMethod.Delete, null);
                        await LoadTour();
                        StateHasChanged();
                    })
                    OnPersonEdit=@(async (p) => {
                        await Http.CallWithAuthToken<string>($"/api/Tour/{Tour.Id}/person/{p.GUID}", await ts.GetToken(), HttpMethod.Patch, p);
                        await LoadTour();
                        StateHasChanged();
                    })
                    OnPersonAdd=@(async (p) => {
                        await Http.CallWithAuthToken<string>($"/api/Tour/{Tour.Id}/person", await ts.GetToken(), HttpMethod.Post, p);
                        await LoadTour();
                        StateHasChanged();
                    })
                    />
                <!--Spendings-->
                <b id=@GetId("spendings")>Spendings</b>
                <TourSpendingsComponent 
                    Tour=@Tour
                    OnSpendingDelete=@(async (s) => {
                        await Http.CallWithAuthToken<string>($"/api/Tour/{Tour.Id}/spending/{s.GUID}", await ts.GetToken(), HttpMethod.Delete, null);
                        await LoadTour();
                        StateHasChanged();
                    })
                >
                    <EditActionTemplate Context="s">
                        <NavLink href=@($"/tour/{Tour.Id}/spending/edit/{s.GUID}")>&nbsp; ✎</NavLink>
                    </EditActionTemplate>
                </TourSpendingsComponent>
            </td>
        </RowTemplate>

    </TableTemplate>
}
<AnchorNavigation />
@code {
    [Parameter]
    public string? TourId { get; set; }

    public Tour? Tour = null;
    protected override async Task OnInitializedAsync()
    {
        await LoadTour();
    }
    private async Task LoadTour()
    {
        var token = await ts.GetToken();
        Tour = await Http.CallWithAuthToken<Tour>($"/api/Tour/{TourId}/suggested", token);
    }
    string GetId(string l) => $"{l}";
    string GetHref(string l) => $"/tour/{TourId}#" + GetId(l);
}
