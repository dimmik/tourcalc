@using AntDesign
@inject IJSRuntime JsRuntime

<span>

    <Menu Mode=MenuMode.Vertical @key="@($"menu_{person.GUID}")">
        <SubMenu 
            Key="@($"submenu_{person.GUID}")" 
            @key="@($"submenu_{person.GUID}")" 
            TitleTemplate="TitleTemplate(deleting, idx, person)"
            Disabled=@disabled
            IsOpen=@disabled
        >
            <MenuItem Key="@($"edit_{person.GUID}")" OnClick=@(async () => await OnPersonEdit(person))>Edit @person.Name</MenuItem>
            <MenuItem Key="@($"delete_{person.GUID}")" OnClick=@(async () => {
                disabled = true;
                var ok = await JsRuntime.InvokeAsync<bool>("confirm", $"Delete '{person.Name}'?");
                if (ok){
                    deleting = true;
                    await OnPersonDelete(person);
                } else {
                    disabled=false;
                }
            })
            >
                Delete @person.Name
                </MenuItem>
            <MenuItem Key="@($"delete_{person.GUID}")"
                OnClick=@(async () => await OnPersonSpend(person))
            >Spend @person.Name</MenuItem>
        </SubMenu>
    </Menu>
    @{/*
    <br/>
    @idx. <b>@((MarkupString)person.Name.AsBreakable(2))</b>
@if (!open)
{
    <Button Size="small" @onclick=@(() => open = true)>...</Button>
} 
@if (open)
{
    <span>
        <Button Disabled=@disabled Size="small" @onclick=@(async () => await OnPersonEdit(person))>Edit</Button>
        <Button Disabled=@disabled Size="small" @onclick=@(async () => {
            var ok = await JsRuntime.InvokeAsync<bool>("confirm", $"Delete '{person.Name}'?");
            if (ok){
                disabled = true;
                await OnPersonDelete(person);
            }
        }) Danger>Delete</Button>
        <Button Size="small" Type="@ButtonType.Primary" Danger=@true
            Shape="@ButtonShape.Circle"
            Icon="@IconType.Outline.Close"
            @onclick=@(() => open = false) />
    </span>
}
    @if (!string.IsNullOrWhiteSpace(person.ParentId))
    {
        <br />
        <span style="font-size:xx-small">paid by <b style="color:green;">@(tour.Persons.FirstOrDefault(p => p.GUID == person.ParentId)?.Name ?? "n/a")</b></span>
    }
*/}
    @if (!string.IsNullOrWhiteSpace(person.ParentId))
    {
        <span style="font-size:xx-small">&gt; paid by <b style="color:green;">@(tour.Persons.FirstOrDefault(p => p.GUID == person.ParentId)?.Name ?? "n/a")</b></span>
    }
</span>

@code {
    [Parameter]
    public int idx { get; set; }
    [Parameter]
    public Person person { get; set; } = new Person();
    [Parameter]
    public Tour tour { get; set; } = new Tour();

    [Parameter]
    public Func<Person, Task> OnPersonEdit { get; set; } = p => Task.CompletedTask;
    [Parameter]
    public Func<Person, Task> OnPersonDelete { get; set; } = p => Task.CompletedTask;
    [Parameter]
    public Func<Person, Task> OnPersonSpend { get; set; } = p => Task.CompletedTask;


    //private bool open = false;
    private bool disabled = false;
    private bool deleting = false;

    int triggerLength = 10;

    RenderFragment TitleTemplate(bool deleting, int idx, Person person)
    {
        var text = $"{(deleting ? "[..del..] " : "")}{idx}. {person.Name}";
        var len = text.Length;
        var style = "";
        if (len > triggerLength)
        {
            style = "font-size: clamp(6px, 2vw, 14px)";
        }
        return __builder =>
        {
            <span style="@style" @key="@($"name_{person.GUID}")">@((MarkupString)text.AsBreakable(3))</span>
        };
    }
}
