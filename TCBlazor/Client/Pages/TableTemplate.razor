@typeparam TItem
@using System.Diagnostics.CodeAnalysis

<table class="table">
    @if (TableHeader is not null)
    {
        <thead style="position: sticky; top: @(TopPadding)px; background-color: white;">
            <tr>@TableHeader</tr>
        </thead>
    }
    <tbody style="font-size: small">
        @foreach (var item in Items)
        {
            idx++;
            if (ConditionalItemIdxIncrement(item, idx))
            {
                itemIdx++;
            }
            if (RowTemplate is not null)
            {
                <tr style=@(ConditionalRowStyle(item, idx))>@RowTemplate((item, itemIdx))</tr>
            }
        }
    </tbody>
</table>

@code {
    [Parameter]
    public RenderFragment? TableHeader { get; set; }

    [Parameter]
    public RenderFragment<(TItem, int)>? RowTemplate { get; set; }

    [Parameter, AllowNull]
    public IEnumerable<TItem> Items { get; set; }

    [Parameter]
    public int TopPadding { get; set; } = 0;

    [Parameter]
    public Func<TItem, int, string> ConditionalRowStyle { get; set; } = (i, idx) => "";

    [Parameter]
    public Func<TItem, int, bool> ConditionalItemIdxIncrement { get; set; } = (i, idx) => true;

    private int idx = 0;
    private int itemIdx = 0;

    protected override void OnParametersSet()
    {
        idx = 0;
        itemIdx = 0;
    }

}