@page "/tourlist"

@using System.Text.Encodings.Web;
@using System.Text.Json;
@using System.Text.Unicode;




@using TCalcCore.Engine
@inject TourcalcEngine engine

@inject IJSRuntime JsRuntime


@if (tours == null)
{
    <h3>Tour List</h3>
    <span>Tours loading...</span>
}
else
{
    <h3>Tour List</h3>

    <TableTemplate Items=@GetToursFiltered() Context="tourItem" TopPadding="30">
    <TableHeader>
        <th>Tour Name
            @if (AddingTour)
        {
            <span style="cursor:pointer;" @onclick=@(() => AddingTour = false)><b>X</b></span>
            <input type="text" placeholder="New Tour Name" @bind-value=@NewTourName/>
                @if (engine.Auth?.IsMaster ?? false)
                    {
                        <span>c: <input type="text" placeholder="code" size="3" @bind-value=@NewTourCode/></span>
                    }
                <span style="cursor:pointer;color:white;background-color:blue;border:1px solid black" @onclick=@(() => AddNewTour())>add</span>
            
        }
        else
        {
            <span style="cursor:pointer;border:solid thin" @onclick=@(() => AddingTour = true)>+</span>            
        }</th>
        <th>Fin</th>
        <th>Arch <input type="checkbox" @bind-value=@ShowArchived/></th>
        <th>Del</th>
    </TableHeader>
    <RowTemplate>
        @{
            var tour = tourItem.Item1;
        }
        <td>
                @if (!(tour.Metadata == "Editing"))
                {
                    <NavLink href=@($"tour/{tour.Id}")>@((MarkupString)tour.Name.AsBreakable())</NavLink> 
                    
                } else
                {
                    <span><input type="text" @bind-value=@tour.Name @onfocusout=@(() => ChangeTourName(tour))/>
                        <span style="cursor:pointer;color:white;background-color:blue;border:1px solid black">save</span>
                        </span>
                }
            <div style="font-size: xx-small">[@tour.DateCreated.ToString("dd.MM.yyyy HH:mm")] 
            <span  style="cursor:pointer; border:solid 1px black" @onclick=@(() => tour.Metadata = (tour.Metadata == "Editing" ? "--" : "Editing"))>edit</span>
                &nbsp;&nbsp; <a href=@($"/goto/{tour.AccessCodeMD5}/{tour.Id}")>link</a> | &nbsp;&nbsp;
                @if (engine.Auth?.IsMaster ?? false)
                    {
                        <span>c: <input type="text" placeholder="code" size="3" @bind-value=@NewTourCode/></span>
                    }
                <span style="cursor:pointer; border:solid 1px black" @onclick=@(() => CloneTour(tour))>clone</span>
                |
                <span style="cursor:pointer; border:solid 1px black" @onclick=@(() => CopyTourJsonToCb(tour))>JSON</span>
            </div>
        </td>
        <td><input @key=@($"fin_{tour.Id}") type="checkbox" 
            checked=@tour.IsFinalizing 
            @onclick=@(() => OnFinChange(tour))
            />
        </td>
        <td><input @key=@($"arch_{tour.Id}") type="checkbox" 
            checked=@tour.IsArchived 
            @onclick=@(() => OnArchChange(tour))
            /></td>
        <td><span style="border:dashed; cursor:pointer;" @onclick=@(() => OnDelete(tour))>X</span></td>
    </RowTemplate>
</TableTemplate>
}

@code {
    private TCalc.Domain.TourList? tours = null;
    private bool ShowArchived = false;
    private bool AddingTour = false;
    private string NewTourName = "";
    private string NewTourCode = "باخوس";


    private async Task AddNewTour()
    {
        if (!string.IsNullOrWhiteSpace(NewTourName) && !string.IsNullOrWhiteSpace(NewTourCode))
        {
            _ = engine.RequestAddTour(new Tour() { Name = NewTourName }, NewTourCode);
            AddingTour = false;
            NewTourName = "";
        } else
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Please specify tour name {((engine.Auth?.IsMaster ?? false) ? "and code" : "")}");
        }
    }

    private Task CloneTour(Tour t)
    {
        var cloned = t.SafeClone<Tour>();
        cloned.Name = $"clone of {t.Name}";
        _ = engine.RequestAddTour(cloned, NewTourCode);
        return Task.CompletedTask;

    }
    private async Task CopyTourJsonToCb(Tour t)
    {
        var text = JsonSerializer.Serialize(t, new JsonSerializerOptions()
        {
            WriteIndented = true, 
            Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping,
        });
        await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", text);
    }

    private Task ChangeTourName(Tour tour)
    {
        _ = engine.RequestEditTourProps(tour, "changename");
        return Task.CompletedTask;
    }

    private Task OnFinChange(Tour tour)
    {
        tour.IsFinalizing = !tour.IsFinalizing;
        _ = engine.RequestEditTourProps(tour, "finalizing");
        return Task.CompletedTask;
    }
    private Task OnArchChange(Tour tour)
    {
        tour.IsArchived = !tour.IsArchived;
        _ = engine.RequestEditTourProps(tour, "archive");
        return Task.CompletedTask;
    }
    private async Task OnDelete(Tour tour)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Delete tour '{tour.Name}'");
        if (confirmed)
        {
            _ = engine.RequestDeleteTour(tour);            
        }
    }
    protected override Task OnInitializedAsync()
    {
        engine.onTourListLoaded += OnTourListLoaded;
        _ = engine.RequestTourListLoad();
        return Task.CompletedTask;
    }
    private Task OnTourListLoaded(TourList tourList, bool isFromServer, DateTimeOffset updatedDt)
    {
        tours = tourList;
        StateHasChanged();
        return Task.CompletedTask;
    }
    private IEnumerable<Tour> GetToursFiltered()
    {
        var res = tours?.Tours ?? new Tour[0] ;
        if (!ShowArchived) res = res.Where(t => !t.IsArchived);
        return res;
    }

}
