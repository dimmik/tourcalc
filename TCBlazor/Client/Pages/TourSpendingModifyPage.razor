@page "/tour/{tourId}/spending/edit/{spendingId}"
@page "/tour/{tourId}/spending/add/{*personId}"

@using TCalcCore.Storage
@using TCalcCore.Network
@using TCalcCore.UI

@inject IJSRuntime JsRuntime
@inject TCDataService dataSvc
@inject TCGlobal tcGlobal
@inject TCDataSyncService dataSync
@inject ITourcalcLocalStorage ts

<div>
    <div class="cool-header"  
        style="margin-left: auto; margin-right: auto; text-align: center; width: clamp(300px, 40vw, 500px);">
        @(mode == ComponentMode.Edit ? "EDIT" : "ADD") SPENDING
    </div>
</div>

@if (tour == null || TheSpending == null)
{
    <span>Loading ...</span>
}
else 
{
    tcGlobal.Title = $"{tour.Name} (s)";
    tcGlobal.Tour = tour;
<div>
    <TourSpendingModifyComponent
        tour=@tour
        TheSpending=@TheSpending
        OnSave=@(async (s) => await SaveSpending(s))
        OnFromChanged=@((g) => FromGuidChanged(g))
        OnCancel="OnCancel"
        TitleText=@(mode == ComponentMode.Edit 
                        ? $"{TheSpending.Description}" 
                        : mode == ComponentMode.AddPlanned
                            ? $"PLANNED {TheSpending.Description}"
                            : "NEW"
                        )
        />
</div>
<TourSpendingsComponent 
    Tour=@tour 
    SpendingListPreProcessor=@(
        (l) => l
        .Where(s => (string.IsNullOrWhiteSpace(TheSpending.FromGuid) || s.FromGuid == TheSpending.FromGuid))
        .OrderBy(s => s.Planned ? 0 : 1)
        .ThenByDescending(s => s.DateCreated)
    )
    OnSpendingDelete=@(async (s) => {
                        await dataSvc.DeleteSpending(TourId, s, OnTourStored);
                        await LoadTour();
                        StateHasChanged();
                    })
    >
    <EditActionTemplate Context="s"> <span style="cursor:pointer" @onclick=@(
        async () => {
            mode = (!tour?.Spendings?.Any(ss => !ss.Planned && ss.GUID == s.GUID) ?? false) 
                ? ComponentMode.AddPlanned
                : ComponentMode.Edit;
            SpendingId = s.GUID;
            LoadSpending();
            if (TheSpending.Planned){
                TheSpending.Type = "";
            }
            StateHasChanged();
            await JsRuntime.InvokeVoidAsync("backToTop");
        }
    )>&nbsp;    @if (s.Planned)
                {
                    <b style="font-size: x-large">+</b>
                }
                else
                {
                    <span style="border:solid 1px black; cursor: pointer">edit</span>                    
                }
            </span></EditActionTemplate>
    </TourSpendingsComponent>
}
@code {
    [Parameter]
    public string? TourId { get; set; }
    [Parameter]
    public string? PersonId { get; set; }
    [Parameter]
    public string? SpendingId { get; set; }

    private Spending TheSpending = new Spending();
    private bool initialized = false;

    private readonly static string whoamiKey = "__WhoAmI";

    private async Task SaveSpending(Spending s)
    {
        if (mode == ComponentMode.Add || mode == ComponentMode.AddPlanned)
        {
            await dataSvc.AddSpending(TourId, s, OnTourStored);
            await ts.Set(whoamiKey, s.FromGuid);
        }
        else
        {
            await dataSvc.EditSpending(TourId, s, OnTourStored);
        }
        await LoadTour();
        OnCancel();
    }
    private void OnCancel()
    {
        InitNewSpending();
        mode = ComponentMode.Add;
        StateHasChanged();
    }
    IEnumerable<string> _selectedValuesTo = new List<string>();

    public Tour? tour = null;

    ComponentMode mode;

    private string WhoAmI = ""; // from spending last ADDED by THIS USER

    protected override async Task OnInitializedAsync()
    {
        await LoadTour();
        WhoAmI = (await ts.Get(whoamiKey)).val ?? "";
        mode = SpendingId == null 
            ? ComponentMode.Add 
            : (!tour?.Spendings?.Any(s => !s.Planned && s.GUID == SpendingId) ?? false) 
                ? ComponentMode.AddPlanned
                : ComponentMode.Edit;
        if (mode == ComponentMode.Add)
        {
            InitNewSpending();
        } else 
        {
            LoadSpending();
        }
        dataSync.OnTourSynced += OnTourStored;
        initialized = true;
    }
    private async Task LoadTour()
    {
        tour = await dataSvc.LoadTour(TourId, OnFreshTourLoaded);
    }
    private async Task OnTourStored()
    {
        tour = await dataSvc.LoadTour(TourId, OnFreshTourLoaded);
        StateHasChanged();
    }
    private Task OnFreshTourLoaded(Tour t, bool isFresh)
    {
        tour = t;
        StateHasChanged();
        return Task.CompletedTask;
    }
    private void InitNewSpending()
    {
        TheSpending = TheSpending.SafeClone<Spending>();
        TheSpending.GUID = "";
        TheSpending.Description = "";
        TheSpending.AmountInCents = 0;
        TheSpending.IsPartialWeighted = true;
        TheSpending.ToAll = true;
        TheSpending.ToGuid = new List<string>();
        if (PersonId != null && !initialized){
            TheSpending.FromGuid = PersonId;
            TheSpending.Type = "Common"; // let us person who create a spending leave this as Common if he does not care. Later he will change
        }
        if (PersonId == null && !initialized && (tour?.Spendings?.Any() ?? false))
        {
            var sp = tour
                ?.Spendings
                ?.Where(s => !s.Planned)
                ?.OrderBy(s => string.IsNullOrWhiteSpace(s.Type) ? 0 : 1)
                ?.ThenBy(s => s.DateCreated)
                ?.LastOrDefault();
            TheSpending.FromGuid = (tour?.Persons ?? new()).Any(p => p.GUID == WhoAmI) ? WhoAmI : "";
            TheSpending.Type = sp?.Type ?? "";
        }
    }
    private void LoadSpending()
    {
        TheSpending = (tour?.Spendings?.FirstOrDefault(s => s.GUID == SpendingId) ?? new Spending()).SafeClone<Spending>();
    }
    private void FromGuidChanged(string g)
    {
        TheSpending.FromGuid = g;
        StateHasChanged();
    }

    enum ComponentMode
    {
        Add, AddPlanned, Edit
    }

}
