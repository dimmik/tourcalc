@page "/tour/{tourId}/spending/edit/{spendingId}"
@page "/tour/{tourId}/spending/add/{*personId}"

@inject IJSRuntime JsRuntime
@inject TCDataService dataSvc
@inject TCGlobal tcGlobal
@inject TCDataSyncService dataSync


<h3>Spending</h3>
@if (tour == null || TheSpending == null)
{
    <span>Loading ...</span>
}
else 
{
    tcGlobal.Title = $"{tour.Name} (s)";
    tcGlobal.Tour = tour;
    <!--
- Form for adding spending with choosing from
- list of spendings, filtered by person and sorted by date desc

-->
<div>
<h4><NavLink href=@($"tour/{TourId}")>&lt;&lt; @tour.Name</NavLink>
        </h4>
            @if (mode == ComponentMode.Edit)
            {
                <b>Editing '@(TheSpending.Description)'</b>
                <Button @onclick=@(() => {
                    mode = ComponentMode.Add;
                    InitNewSpending();
                    StateHasChanged();
                })
                Type="@ButtonType.Primary"
                >Add New</Button>
        } else if (mode == ComponentMode.AddPlanned)
        {
                <b>Adding planned '@(TheSpending.Description)'</b>
                           
        } else
        {
                <b>Adding New Spending</b>
            }
    <TourSpendingModifyComponent
        tour=@tour
        TheSpending=@TheSpending
        OnSave=@(async (s) => await SaveSpending(s))
        OnFromChanged=@((g) => FromGuidChanged(g))
        OnCancel="OnCancel"
        />
</div>
<TourSpendingsComponent 
    Tour=@tour 
    SpendingListPreProcessor=@(
        (l) => l
        .Where(s => (string.IsNullOrWhiteSpace(TheSpending.FromGuid) || s.FromGuid == TheSpending.FromGuid))
        .OrderBy(s => s.Planned ? 0 : 1)
        .ThenByDescending(s => s.DateCreated)
    )
    OnSpendingDelete=@(async (s) => {
                        await dataSvc.DeleteSpending(TourId, s, OnFreshTourLoaded);
                        await LoadTour();
                        StateHasChanged();
                    })
    >
    <EditActionTemplate Context="s"> <span style="cursor:pointer" @onclick=@(
        async () => {
            mode = (!tour?.Spendings?.Any(ss => !ss.Planned && ss.GUID == s.GUID) ?? false) 
                ? ComponentMode.AddPlanned
                : ComponentMode.Edit;
            SpendingId = s.GUID;
            LoadSpending();
            if (TheSpending.Planned){
                TheSpending.Type = "";
            }
            StateHasChanged();
            await JsRuntime.InvokeVoidAsync("backToTop");
        }
    )>&nbsp;    @if (s.Planned)
                {
                    <b style="font-size: x-large">+</b>
                }
                else
                {
                    <span style="border:solid 1px black; cursor: pointer">edit</span>                    
                }
            </span></EditActionTemplate>
    </TourSpendingsComponent>
}
@code {
    [Parameter]
    public string? TourId { get; set; }
    [Parameter]
    public string? PersonId { get; set; }
    [Parameter]
    public string? SpendingId { get; set; }

    private Spending TheSpending = new Spending();
    private bool initialized = false;

    private async Task SaveSpending(Spending s)
    {
        if (mode == ComponentMode.Add || mode == ComponentMode.AddPlanned)
        {
            await dataSvc.AddSpending(TourId, s, OnFreshTourLoaded);
        }
        else
        {
            await dataSvc.EditSpending(TourId, s, OnFreshTourLoaded);
        }
        await LoadTour();
        OnCancel();
    }
    private void OnCancel()
    {
        InitNewSpending();
        mode = ComponentMode.Add;
        StateHasChanged();
    }
    IEnumerable<string> _selectedValuesTo = new List<string>();

    public Tour? tour = null;

    ComponentMode mode;

    protected override async Task OnInitializedAsync()
    {
        await LoadTour();
        mode = SpendingId == null 
            ? ComponentMode.Add 
            : (!tour?.Spendings?.Any(s => !s.Planned && s.GUID == SpendingId) ?? false) 
                ? ComponentMode.AddPlanned
                : ComponentMode.Edit;
        if (mode == ComponentMode.Add)
        {
            InitNewSpending();
        } else 
        {
            LoadSpending();
        }
        dataSync.OnTourSynced += OnFreshTourLoaded;
        initialized = true;
    }
    private async Task LoadTour()
    {
        tour = await dataSvc.LoadTour(TourId, OnFreshTourLoaded);
    }
    private async Task OnFreshTourLoaded()
    {
        tour = await dataSvc.LoadTour(TourId, () => { return Task.CompletedTask; });
        StateHasChanged();
    }
    private void InitNewSpending()
    {
        TheSpending = TheSpending.SafeClone<Spending>();
        TheSpending.GUID = "";
        TheSpending.Description = "";
        TheSpending.AmountInCents = 0;
        TheSpending.IsPartialWeighted = true;
        TheSpending.ToAll = true;
        TheSpending.ToGuid = new List<string>();
        if (PersonId != null && !initialized) TheSpending.FromGuid = PersonId;
        if (PersonId == null && !initialized && (tour?.Spendings?.Any() ?? false))
        {
            var sp = tour
                ?.Spendings
                ?.Where(s => !s.Planned)
                ?.OrderBy(s => string.IsNullOrWhiteSpace(s.Type) ? 0 : 1)
                ?.ThenBy(s => s.DateCreated)
                ?.LastOrDefault();
            TheSpending.FromGuid = "";// sp?.FromGuid ?? "";
            TheSpending.Type = sp?.Type ?? "";
        }
    }
    private void LoadSpending()
    {
        TheSpending = tour?.Spendings?.FirstOrDefault(s => s.GUID == SpendingId) ?? new Spending();
    }
    private void FromGuidChanged(string g)
    {
        TheSpending.FromGuid = g;
        StateHasChanged();
    }

    enum ComponentMode
    {
        Add, AddPlanned, Edit
    }

}
