@page "/tour/{tourId}/addspending/{*personId}"
@using TCBlazor.Client.Utils
@using TCalc.Domain
@using AntDesign
@inject HttpClient Http
@inject TCBlazor.Client.Storage.TourcalcLocalStorage tourLocalStorage

<h3>TourAddSpendingPage</h3>
spendings to tour @TourId dfault from person '@PersonId'
@if (tour == null)
{
    <span>Tour loading ...</span>
}
else 
{
<!--
- Form for adding spending with choosing from
- list of spendings, filtered by person and sorted by date desc

-->
<div>
    Description: <input type="text" @bind-value=@(NewSpending.Description)/> <br/>
    Amount: <input type="text" @bind-value=@(NewSpending.AmountInCents)/><br/>
    Category: <AutoComplete 
        @bind-Value=@(NewSpending.Type) 
        Options=@(tour.Spendings.Select(s => s.Type).Distinct()) 
        Placeholder="input here"/>
<br/>
    From:   <select id="from" @bind="NewSpending.FromGuid">
    @foreach (var p in tour.Persons)
    {
        <option value="@p.GUID">@p.Name</option>
    }
    </select><br/>
    To All: <input type="checkbox" @bind-value=@(NewSpending.ToAll)/><br/>

    To <Select Mode="multiple"
        Placeholder="To..."
		@bind-Values="@_selectedValuesTo"
		TItemValue="string"
		TItem="string"
        OnSelectedItemsChanged="OnToPersonsChangedHandler"
		Style="width: 100%; margin-bottom: 8px;"
        Disabled=@(NewSpending.ToAll)
		EnableSearch
		AllowClear>
		    <SelectOptions>
			    @foreach(var p in tour.Persons)
			    {
				    <SelectOption TItemValue="string" TItem="string" Value=@p.GUID Label=@p.Name />
			    }
		    </SelectOptions>
    </Select><br/>
    <button @onclick=@(async () => await AddSpending())>Add</button>
</div>
<TourSpendingsComponent 
    Tour=@tour 
    SpendingListPreProcessor=@(
        (l) => l
        .Where(s => !s.Planned && (string.IsNullOrWhiteSpace(NewSpending.FromGuid) || s.FromGuid == NewSpending.FromGuid))
        .OrderByDescending(s => s.DateCreated)
    )
    />
}
@code {
    [Parameter]
    public string? TourId { get; set; }
    [Parameter]
    public string? PersonId { get; set; }

    private Spending NewSpending = new Spending();
    private async Task AddSpending()
    {
        await Http.GetFromJsonWithAuthToken<string>($"/api/Tour/{TourId}/spending", await tourLocalStorage.GetToken(), HttpMethod.Post, NewSpending);
        await LoadTour();
        InitNewSpending();
    }
    IEnumerable<string> _selectedValuesTo = new List<string>();

    public Tour? tour = null;
    protected override async Task OnInitializedAsync()
    {
        await LoadTour();
        InitNewSpending();
    }
    private async Task LoadTour()
    {
        var token = await tourLocalStorage.GetToken();
        tour = await Http.GetFromJsonWithAuthToken<Tour>($"/api/Tour/{TourId}/suggested", token);        
    }
    private void InitNewSpending()
    {
        NewSpending.Description = "";
        NewSpending.AmountInCents = 0;
        NewSpending.IsPartialWeighted = true;
        if (PersonId != null) NewSpending.FromGuid = PersonId;
    }
    private void OnToPersonsChangedHandler(IEnumerable<string> values)
    {
        if (values != null){
            Console.WriteLine($"selected: ${string.Join(",", values)}");
            NewSpending.ToGuid = values.ToList();
        }
    }

    
}
