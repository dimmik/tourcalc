@page "/tour/{tourId}/addspending/{*personId}"
@using TCBlazor.Client.Utils
@using TCalc.Domain
@using AntDesign
@inject HttpClient Http
@inject TCBlazor.Client.Storage.TourcalcLocalStorage tourLocalStorage
@inject IJSRuntime JsRuntime

<h3>Add Spending</h3>
@if (tour == null)
{
    <span>Tour loading ...</span>
}
else 
{
<!--
- Form for adding spending with choosing from
- list of spendings, filtered by person and sorted by date desc

-->
<div>
<h4><NavLink href=@($"tour/{tour.Id}")>@tour.Name</NavLink></h4>
    <ModifySpendingComponent
        tour=@tour
        TheSpending=@NewSpending
        OnSave=@(async (s) => await AddSpending(s))
        />
</div>
<TourSpendingsComponent 
    Tour=@tour 
    SpendingListPreProcessor=@(
        (l) => l
        .Where(s => !s.Planned && (string.IsNullOrWhiteSpace(NewSpending.FromGuid) || s.FromGuid == NewSpending.FromGuid))
        .OrderByDescending(s => s.DateCreated)
    )
    />
}
@code {
    [Parameter]
    public string? TourId { get; set; }
    [Parameter]
    public string? PersonId { get; set; }

    private Spending NewSpending = new Spending();
    private async Task AddSpending(Spending s)
    {
        List<string> err = new List<string>();
        if (s.AmountInCents == 0)
        {
            err.Add("Amount should not be 0");
        }
        if (string.IsNullOrWhiteSpace(s.Description))
        {
            err.Add("Please Specify Description");
        }
        if (!s.ToAll && (s.ToGuid ?? new List<string>()).Count == 0)
        {
            err.Add("Spending should have recepients or be to all");
        }
        if (err.Count == 0)
        {
            await Http.GetFromJsonWithAuthToken<string>($"/api/Tour/{TourId}/spending", await tourLocalStorage.GetToken(), HttpMethod.Post, s);
            await LoadTour();
            InitNewSpending();
        } 
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Errors: {string.Join("\n", err)}");
        }
    }
    IEnumerable<string> _selectedValuesTo = new List<string>();

    public Tour? tour = null;
    protected override async Task OnInitializedAsync()
    {
        await LoadTour();
        InitNewSpending();
    }
    private async Task LoadTour()
    {
        var token = await tourLocalStorage.GetToken();
        tour = await Http.GetFromJsonWithAuthToken<Tour>($"/api/Tour/{TourId}/suggested", token);        
    }
    private void InitNewSpending()
    {
        NewSpending.Description = "";
        NewSpending.AmountInCents = 0;
        NewSpending.IsPartialWeighted = true;
        NewSpending.ToAll = true;
        if (PersonId != null) NewSpending.FromGuid = PersonId;
    }
    

    
}
