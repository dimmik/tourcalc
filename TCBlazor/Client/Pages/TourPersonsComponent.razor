@using TCalc.Domain
@using TCBlazor.Client.Utils
@inject IJSRuntime JsRuntime


<TableTemplate Items="@(Tour?.Persons ?? new List<Person>())"  Context="person" TopPadding="30">
    <TableHeader>
        <th>Person Name</th>
        <th>Weight</th>
        <th>Spent</th>
        <th>Received</th>
        <th>Debt</th>
    </TableHeader>
    <RowTemplate>
        <td>
            <span style="cursor:pointer;" @onclick=@(async () => {
                bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Delete person '{person.Name}'?");
                if (confirmed)
                {
                    await OnPersonDelete(person);
                }
            })>
                🗙
            </span>
            <span style="cursor:pointer;">@((MarkupString)person.Name.AsBreakable())</span>
            &nbsp;|&nbsp;<NavLink href=@($"tour/{Tour?.GUID ?? "000"}/spending/add/{person.GUID}")>spend</NavLink> 
            @if (!string.IsNullOrWhiteSpace(person.ParentId)){
                <div>→ @(Tour?.Persons?.FirstOrDefault(p => p.GUID == person.ParentId)?.Name ?? "n/a")</div>
            }
        </td>
        <td>@person.Weight</td>
        <td>@person.SpentInCents</td>
        <td>@person.ReceivedInCents</td>
        <td>@person.Debt()</td>
    </RowTemplate>
</TableTemplate>

@code {
    [Parameter]
    public Tour? Tour { get; set; } = null;

    [Parameter]
    public Func<Person, Task> OnPersonEdit { get; set; } = async (p) => { };
    [Parameter]
    public Func<Person, Task> OnPersonAdd { get; set; } = async (p) => { };
    [Parameter]
    public Func<Person, Task> OnPersonDelete { get; set; } = async (p) => { };
}
