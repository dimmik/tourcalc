@using TCBlazor.Client.Storage;

@inject TourcalcLocalStorage ts
@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager


<TableTemplate 
    Items="@GetPersons()"  
    Context="personItem" 
    TopPadding="30"
    ConditionalItemIdxIncrement=@((p, idx) => p.Metadata != "Adding")
>
    <TableHeader>
        <th>Person Name</th>
        <th>Weight</th>
        <th>Spent</th>
        <th>Received</th>
        <th>Debt</th>
    </TableHeader>
    <RowTemplate>
        @{
            var person = personItem.Item1;
            var idx = personItem.Item2;
        }
        @if (string.IsNullOrWhiteSpace(person.Metadata))
        {
            <td>
                <span style="cursor:pointer; border: 1px solid lightgrey;" @onclick=@(async () => {
                bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Delete person '{person.Name}'?");
                if (confirmed)
                {
                    await OnPersonDelete(person);
                }
            })>
                    <b>X</b>
                </span>
                <span>&nbsp; @idx. <b>@((MarkupString)person.Name.AsBreakable())</b></span>
                &nbsp;<span style="font-size: x-small;cursor:pointer; color: blue; border: solid 1px black" @onclick=@(() => person.Metadata = "Editing")>edit</span>
                &nbsp;|&nbsp;<NavLink href=@($"tour/{Tour?.GUID ?? "000"}/spending/add/{person.GUID}")>spend</NavLink> 
                @if (!string.IsNullOrWhiteSpace(person.ParentId))
                {
                    <div>→ @(Tour?.Persons?.FirstOrDefault(p => p.GUID == person.ParentId)?.Name ?? "n/a")</div>
                }
            </td>
            <td>@person.Weight</td>
            <td>@SpentInfo(person)</td>
            <td>@ReceivedInfo(person)</td>
            <td><b style="color: @($"{(Debt(person) > 0 ? "red" : Debt(person) == 0 ? "black" : "green")}")">@Debt(person)</b></td>
        } 
        else if (person.Metadata == "Editing")
        {
            @AddEditCodeBlock(person, () => (person ?? new Person()).Metadata = "", OnPersonEdit)
        } else if (person.Metadata == "Adding")
        {
            if (!AddingPerson)
            {
                <td colspan="5"><span style="cursor:pointer" @onclick=@(() => AddingPerson = !AddingPerson)>+ Add Person</span>
                </td>
            } else
            {
                @AddEditCodeBlock(person, () => AddingPerson = !AddingPerson, OnPersonAdd)
            }
        }
    </RowTemplate>
</TableTemplate>

@code {
    [Parameter]
    public Tour? Tour { get; set; } = null;

    [Parameter]
    public Func<Person, Task> OnPersonEdit { get; set; } = async (p) => { };
    [Parameter]
    public Func<Person, Task> OnPersonAdd { get; set; } = async (p) => { };
    [Parameter]
    public Func<Person, Task> OnPersonDelete { get; set; } = async (p) => { };

    Dictionary<string, Person> EditingPersons { get; set; } = new Dictionary<string, Person>();

    Dictionary<string, bool> ReceivedInfoShown { get; set; } = new Dictionary<string, bool>();
    Dictionary<string, bool> SpentInfoShown { get; set; } = new Dictionary<string, bool>();

    bool AddingPerson = false;

    private UISettings settings = new UISettings();

    protected override async Task OnInitializedAsync()
    {
        settings = await ts.GetUISettings();
    }

    protected override void OnParametersSet()
    {
        EditingPersons = GetPersons().Select(p => p.SafeClone<Person>()).ToDictionary(p => p.GUID);
        ReceivedInfoShown = GetPersons().ToDictionary(k => k.GUID, v => false);
        SpentInfoShown = GetPersons().ToDictionary(k => k.GUID, v => false);
    }

    private long Debt(Person p)
    {
        // round to MinimumMeaningfulDebt
        return Math.Abs(p.Debt()) > settings.MinimumMeaningfulDebt ? p.Debt() : 0;
    }

    
    private IEnumerable<Person> GetPersons()
    {
        return new[] { new Person() { Name = "", Metadata = "Adding", GUID = "New" } }.Concat(GetSortedTourPersons());
    }
    private IEnumerable<Person> GetSortedTourPersons()
    {
        IEnumerable<Person> pers = (Tour?.Persons ?? new List<Person>());
        var res = pers.OrderBy(p =>
        {
            var name = PersonNameWithParentNamesRecursive(p);
            return name;
        });
        return res;
    }
    private string PersonNameWithParentNamesRecursive(Person? p, int level = 0)
    {
        if (level > 50) return "";
        if (p == null) return "";
        if (string.IsNullOrWhiteSpace(p?.ParentId)) return p?.Name ?? "";
        return $"{PersonNameWithParentNamesRecursive(Tour?.Persons?.FirstOrDefault(pp => pp.GUID == (p?.ParentId ?? "")), level + 1)}{p?.Name ?? ""}";
    }

    private RenderFragment footer(Action onOk)
    {
        return __builder =>
        {
    <Template>
                                            <Button OnClick=@((e) => onOk())
                    Type="primary">
                                                     Got It
                                            </Button>
    </Template>
        };
    }

    private bool IsSubmittingPerson = false;

    private RenderFragment ReceivedInfo(Person person)
    {
        bool visible = ReceivedInfoShown.ContainsKey(person.GUID) ? ReceivedInfoShown[person.GUID] : false;
        return __builder =>
        {
    <span style="cursor:pointer" @onclick=@(() => ReceivedInfoShown[person.GUID] = true)>@person.ReceivedInCents</span>
    <Modal Title="@($"Received for {person.Name}")"
                        Visible="@visible"
                        Footer=@(footer(() => ReceivedInfoShown[person.GUID] = false))
                        OnOk=@(() => ReceivedInfoShown[person.GUID] = false)
                        OnCancel=@(() => ReceivedInfoShown[person.GUID] = false)
                        DestroyOnClose=@true
                        Closable=@true
                                                                                    >
                                                                                    <div style="height: 55vh; overflow:scroll;">
                                                                                        <TableTemplate Items=@(person.ReceivedSendingInfo) 
                                Context="siItem"
                                ConditionalRowStyle=@((spi, idx) => {
                                    if (!spi.IsSpendingToAll && spi.ToNames.Count() == 1) // personal
                                    {
                                        return "background-color: lightgreen";
                                    }
                                    if (!spi.IsSpendingToAll){
                                        return "background-color: lightblue";
                                    }
                                    return "background-color: white";
                                })
                                                                                        >
                                                                                            <RowTemplate>
                                                                                            @{
                                                                    var si = siItem.Item1;
                                                                                            }
                                                                                                <td>@((MarkupString)si.From.AsBreakable(3))</td>
                                                                                                <td>@si.ReceivedAmountInCents 
                                                                                                    <span style="font-size: xx-small">@($"{si.ReceivedAmountInCents * 100.0 / si.TotalSpendingAmountInCents : 0.00}")% of @si.TotalSpendingAmountInCents</span>
                                                                                                </td>
                                                                                                <td>@((MarkupString)si.SpendingDescription.AsBreakable())</td>
                                                                                            </RowTemplate>
                                                                                        </TableTemplate>
                                                                                    </div>
    </Modal>
        };
    }
    
    private RenderFragment SpentInfo(Person person)
    {
        bool visible = SpentInfoShown.ContainsKey(person.GUID) ? SpentInfoShown[person.GUID] : false;
        return __builder =>
        {
    <span style="cursor:pointer" @onclick=@(() => SpentInfoShown[person.GUID] = true)>@person.SpentInCents</span>
    <Modal Title="@($"Spent for {person.Name}")"
                Visible="@visible"
                Footer=@(footer(() => SpentInfoShown[person.GUID] = false))
                OnOk=@(() => SpentInfoShown[person.GUID] = false)
                OnCancel=@(() => SpentInfoShown[person.GUID] = false)
                DestroyOnClose=@true
                Closable=@true
                                                                            >
                                                                            <div style="height: 55vh; overflow:scroll;">
                                                                                <TableTemplate Items=@(person.SpentSendingInfo) 
                        Context="siItem"
                        ConditionalRowStyle=@((spi, idx) => {
                            if (!spi.IsSpendingToAll && spi.ToNames.Count() == 1) // personal
                            {
                                return "background-color: lightgreen";
                            }
                            if (!spi.IsSpendingToAll){
                                return "background-color: lightblue";
                            }
                            return "background-color: white";
                        })
                                                                                >
                                                                                    <RowTemplate>
                                                                                    @{
                                                            var si = siItem.Item1;
                                                                                    }
                                                                                        <td>@((MarkupString)si.From.AsBreakable(3))</td>
                                                                                        <td>@si.TotalSpendingAmountInCents</td>
                                                                                        <td>@((MarkupString)si.SpendingDescription.AsBreakable())</td>
                                                                                    </RowTemplate>
                                                                                </TableTemplate>
                                                                            </div>
    </Modal>
        };
    }

    private RenderFragment AddEditCodeBlock(Person person, Action onCloseButton, Func<Person, Task> onSubmit)
    {
        Person pp = EditingPersons.ContainsKey(person.GUID) ? EditingPersons[person.GUID] : new Person();
        pp.Metadata = "";
        return __builder =>
        {
    <td>
                                        @if (IsSubmittingPerson)
                {
                                            <div>submitting...</div>
                }
                                           <input @bind-value=@(pp.Name) 
                size=7 
                disabled=@IsSubmittingPerson
                                            @onkeyup=@(async (e) => {
                        if (e.Code == "Enter" || e.Code == "NumpadEnter"){
                            IsSubmittingPerson = true;
                            await onSubmit(pp);
                            IsSubmittingPerson = false;
                        }
                    }) 
                                            /> 
                                    <button 
        style="cursor:pointer;border:1px solid black;background-color:blue;color:white;" 
                                    @onclick=@(async () => {
            IsSubmittingPerson = true;
            await onSubmit(pp);
            IsSubmittingPerson = false;
        })>
                                    submit
                                    </button>
                                    <span>&nbsp;|&nbsp;</span>
                                    <button 
                style="cursor:pointer;border:1px solid black;background-color:red;color:white;" 
                                    @onclick=@(() => onCloseButton())>
                                    cancel
                                    </button>
                                                                        <div>→ 
                                                                            <nobr><Select
                                                                                @bind-Value="pp.ParentId"
                    TItemValue="string"
		            TItem="string"
                    Placeholder="Payer"
                    Style="display: inline-block;"
                    Disabled=@IsSubmittingPerson
                    DropdownMatchSelectWidth=@false
                    AllowClear=@true
                    DefaultActiveFirstItem="true"
                                                                                EnableSearch
                                                                            >
                                                                                <SelectOptions>
                                                                                    @foreach (var p in (Tour?.Persons ?? new List<Person>()).Where(ppp => ppp.GUID != pp.GUID))
                            {
                                                                                        <SelectOption TItemValue="string" TItem="string" Value=@p.GUID Label=@p.Name />
                            }
                                                                                </SelectOptions>
                                                                            </Select>
                                                                            </nobr>
                                                                        </div>
    </td>
    <td><input @bind-value=@(pp.Weight) size="5" disabled=@IsSubmittingPerson/></td>
    <td></td>
    <td></td>
    <td></td>
        };

        
    }

}
