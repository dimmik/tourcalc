@using TCalc.Domain
@using TCBlazor.Client.Utils
@using AntDesign

@inject IJSRuntime JsRuntime


<TableTemplate Items="@GetPersons()"  Context="person" TopPadding="30">
    <TableHeader>
        <th>Person Name</th>
        <th>Weight</th>
        <th>Spent</th>
        <th>Received</th>
        <th>Debt</th>
    </TableHeader>
    <RowTemplate>
        @if (string.IsNullOrWhiteSpace(person.Metadata))
        {
            <td>
                <span style="cursor:pointer;" @onclick=@(async () => {
                bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Delete person '{person.Name}'?");
                if (confirmed)
                {
                    await OnPersonDelete(person);
                }
            })>
                    🗙
                </span>
                <span style="cursor:pointer;" @onclick=@(() => person.Metadata = "Editing")>@((MarkupString)person.Name.AsBreakable())</span>
                &nbsp;|&nbsp;<NavLink href=@($"tour/{Tour?.GUID ?? "000"}/spending/add/{person.GUID}")>spend</NavLink> 
                @if (!string.IsNullOrWhiteSpace(person.ParentId))
                {
                    <div>→ @(Tour?.Persons?.FirstOrDefault(p => p.GUID == person.ParentId)?.Name ?? "n/a")</div>
                }
            </td>
            <td>@person.Weight</td>
            <td>@person.SpentInCents</td>
            <td>@person.ReceivedInCents</td>
            <td>@person.Debt()</td>
        } 
        else if (person.Metadata == "Editing")
        {
            @AddEditCodeBlock(person, () => (person ?? new Person()).Metadata = "", OnPersonEdit)
        } else if (person.Metadata == "Adding")
        {
            if (!AddingPerson)
            {
                <td colspan="5"><span style="cursor:pointer" @onclick=@(() => AddingPerson = !AddingPerson)>Add Person</span></td>
            } else
            {
                @AddEditCodeBlock(person, () => AddingPerson = !AddingPerson, OnPersonAdd)
            }
        }
    </RowTemplate>
</TableTemplate>

@code {
        [Parameter]
        public Tour? Tour { get; set; } = null;

        [Parameter]
        public Func<Person, Task> OnPersonEdit { get; set; } = async (p) => { };
        [Parameter]
        public Func<Person, Task> OnPersonAdd { get; set; } = async (p) => { };
        [Parameter]
        public Func<Person, Task> OnPersonDelete { get; set; } = async (p) => { };

        Dictionary<string, Person> EditingPersons { get; set; } = new Dictionary<string, Person>();

        bool AddingPerson = false;

    protected override void OnParametersSet()
    {
        EditingPersons = GetPersons().Select(p => p.SafeClone<Person>()).ToDictionary(p => p.GUID);
    }
    private IEnumerable<Person> GetPersons()
    {
        return new[] { new Person() { Name = "", Metadata = "Adding", GUID = "New" } }.Concat((Tour?.Persons ?? new List<Person>()));
    }

    private RenderFragment AddEditCodeBlock(Person person, Action onCloseButton, Func<Person, Task> onSubmit)
    {
        Person pp = EditingPersons.ContainsKey(person.GUID) ? EditingPersons[person.GUID] : new Person();
        pp.Metadata = "";
        return __builder =>
        {
        <td>
            <span style="cursor:pointer;" @onclick=@(() => onCloseButton())>
                🗙
            </span>
            <input @bind-value=@(pp.Name)/> 
            <div>→ 
                <Select
                    @bind-Value="pp.ParentId"
                    TItemValue="string"
		            TItem="string"
                    Placeholder="Who is paying"
                    Style="display: inline-block;"
                    DefaultActiveFirstItem="true"
                    EnableSearch
                >
                    <SelectOptions>
                        @foreach (var p in new[] { new Person() { Name = "---- None ----", GUID = "" } }.Concat((Tour?.Persons ?? new List<Person>())))
                            {
                            <SelectOption TItemValue="string" TItem="string" Value=@p.GUID Label=@p.Name />
                            }
                    </SelectOptions>
                </Select>
            </div>
        </td>
        <td><input @bind-value=@(pp.Weight)/></td>
        <td><span style="cursor:pointer" @onclick=@(async () => await onSubmit(pp))>✓</span></td>
        <td></td>
        <td></td>
        }
    ;

        
    }

}
