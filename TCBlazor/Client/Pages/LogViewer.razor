@page "/logs"

@using TCalcCore.Storage
@using TCalcCore.Network
@using TCalcCore.Auth
@inject EnrichedHttpClient http
@inject ITokenStorage tokenStorage

<h3>LogViewer</h3>

@if (logEntries is null)
{
    <span>loading...</span>
} else
{
    <ul>
        <li>Hours Ago From: <AntDesign.InputNumber @bind-Value="hoursAgoFrom" TValue="int" OnChange=@(() => LoadLogEntries().ContinueWith((t) => StateHasChanged()))/> 
            
        </li>
        <li>Hours Ago To: <AntDesign.InputNumber @bind-Value="hoursAgoTo" TValue="int" OnChange=@(() => LoadLogEntries().ContinueWith((t) => StateHasChanged()))/> </li>
        <li><RangePicker ShowTime="@true"
               @bind-Value="dateFromTo"
               Format="yyyy-MM-dd HH:00:00"
               Disabled="new bool[] { false, false }"
               OnChange="(args) => dateFromTo = args.Dates"
               /></li>
    </ul>
    <table style="border: 1px solid blue">
        <tr>
            <th style="border: 1px solid red">
                Except
            </th>
            <th style="border: 1px solid green">
                Search <Switch @bind-Value="IsSearchAnd" CheckedChildren="All" UnCheckedChildren="Any"/>
            </th>
        </tr>
        <tr>
            <td style="border: 1px solid red">
                @foreach (var ex in Except.Keys)
                {
                    <Tag @key=@($"ex_{ex}") Closable OnClose=@(() => Except.Remove(ex))>@ex</Tag>
                }
            </td>
            <td style="border: 1px solid green">
                @foreach (var ex in Search.Keys)
                {
                    <Tag @key=@($"se_{ex}") Closable OnClose=@(() => Search.Remove(ex))>@ex</Tag>
                }
            </td>
        </tr>
                <tr>
            <td style="border: 1px solid red">
                <input @bind-value=@exAdd /> <button @onclick=@(() => { if (!string.IsNullOrWhiteSpace(exAdd)) Except[exAdd] = true; exAdd = ""; })>+</button>                
            </td>
            <td style="border: 1px solid green">
                <input @bind-value=@seAdd /> <button @onclick=@(() => { if (!string.IsNullOrWhiteSpace(seAdd)) Search[seAdd] = true; seAdd = ""; })>+</button>
            </td>
        </tr>
    </table>
    <br/><b>Total @(GetLogEntries().Count())</b>
    <TableTemplate Items="GetLogEntries()" Context="logItem">
        <TableHeader>
            <td>When</td>
            <td>IP</td>
            <td>Message</td>
            <td>User Agent</td>
        </TableHeader>
        <NoDataRowTemplate>
            <td colspan="4"><i>No Data</i></td>
        </NoDataRowTemplate>
        <RowTemplate>
            @{
                var log = logItem.Item1;
            }
            <td>@($"{log.Timestamp.ToLocalTime():yyyy-MM-dd HH:mm:ss}")</td>
            <td>@log.Ip</td>
            <td>@log.Msg</td>
            <td><span style="font-size: xx-small">@log.UserAgent</span></td>
        </RowTemplate>
    </TableTemplate>
}

@code {
    private IEnumerable<RLogEntry>? logEntries;

    private DateTime?[] _dateFromTo = new DateTime?[2];

    DateTime?[] dateFromTo { 
        get
        {
            var now = DateTime.Now;
            _dateFromTo[0] = now - TimeSpan.FromHours(hoursAgoFrom);
            _dateFromTo[1] = now - TimeSpan.FromHours(hoursAgoTo);
            return _dateFromTo;
        } 
        set
        {
            if (value == null || value.Length != 2) return;
            var from = value[0];
            var to = value[1];
            var diff1 = (DateTime.Now - from);
            var diff2 = (DateTime.Now - to);
            if (diff1 is not null && diff2 is not null)
            {
                hoursAgoFrom = (int)Math.Floor(diff1.Value.TotalHours);
                hoursAgoTo = (int)Math.Floor(diff2.Value.TotalHours);
                _ = LoadLogEntries().ContinueWith((t) => StateHasChanged());
            }
        } }

    int hoursAgoFrom = 30 * 24;
    int hoursAgoTo = 0;

    private string exAdd = "";
    private string seAdd = "";

    // GET /api/Log/logs
    private SortedDictionary<string, bool> Except = new(){
        {"GET /api/Log/logs", true }
    };
    private SortedDictionary<string, bool> Search = new();
    private bool IsSearchAnd = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadLogEntries();
    }
    private async Task LoadLogEntries()
    {
        var token = await tokenStorage.GetToken();
        logEntries = await http.CallWithAuthToken<IEnumerable<RLogEntry>>($"/api/Log/logs?hoursAgoFrom={hoursAgoFrom}&hoursAgoTo={hoursAgoTo}", token, (m) => { });
    }
    private IEnumerable<RLogEntry> GetLogEntries()
    {
        var res = (logEntries ?? Enumerable.Empty<RLogEntry>())
        .Where(l => 
            (!Search.Keys.Any() || (IsSearchAnd 
                ? Search.Keys.All(s => SearchableString(l).Contains(s.ToLower())) 
                : Search.Keys.Any(s => SearchableString(l).Contains(s.ToLower())))
             )
             && !Except.Keys.Any(s => SearchableString(l).Contains(s.ToLower())) 
        )
        ;

        return res;
    }
    public static string SearchableString(RLogEntry l)
    {
        return $"{l.Timestamp.ToLocalTime():yyyy-MM-dd HH:mm:ss} {l.Ip} {l.Msg} {l.UserAgent}".ToLower();
    }
    
}
