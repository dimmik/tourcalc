@page "/logs"

@using TCalcCore.Storage
@using TCalcCore.Network
@inject EnrichedHttpClient http
@inject ITourcalcLocalStorage ts

<h3>LogViewer</h3>

@if (logEntries is null)
{
    <span>loading...</span>
} else
{
    <ul>
        <li>Hours Ago From: <AntDesign.InputNumber @bind-Value="hoursAgoFrom" TValue="int" OnChange=@(() => LoadLogEntries().ContinueWith((t) => StateHasChanged()))/> </li>
        <li>Hours Ago To: <AntDesign.InputNumber @bind-Value="hoursAgoTo" TValue="int" OnChange=@(() => LoadLogEntries().ContinueWith((t) => StateHasChanged()))/> </li>
    </ul>
    <span>Except: <input @bind-value=@Except /> Find: <input @bind-value=@Search/> <button>Update</button></span>
    <br/><b>Total @(GetLogEntries().Count())</b>
    <TableTemplate Items="GetLogEntries()" Context="logItem">
        <TableHeader>
            <td>When</td>
            <td>IP</td>
            <td>Message</td>
            <td>User Agent</td>
        </TableHeader>
        <NoDataRowTemplate>
            <td colspan="4"><i>No Data</i></td>
        </NoDataRowTemplate>
        <RowTemplate>
            @{
                var log = logItem.Item1;
            }
            <td>@($"{log.Timestamp.ToLocalTime():yyyy-MM-dd HH:mm:ss}")</td>
            <td>@log.Ip</td>
            <td>@log.Msg</td>
            <td><span style="font-size: xx-small">@log.UserAgent</span></td>
        </RowTemplate>
    </TableTemplate>
}

@code {
    private IEnumerable<RLogEntry>? logEntries;

    int hoursAgoFrom = 30 * 24;
    int hoursAgoTo = 0;

    // GET /api/Log/logs
    private string Except = "GET /api/Log/logs";
    private string Search = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadLogEntries();
    }
    private async Task LoadLogEntries()
    {
        var (token, _) = await ts.GetToken();
        logEntries = await http.CallWithAuthToken<IEnumerable<RLogEntry>>($"/api/Log/logs?hoursAgoFrom={hoursAgoFrom}&hoursAgoTo={hoursAgoTo}", token, (m) => { });
    }
    private IEnumerable<RLogEntry> GetLogEntries()
    {
        var res = (logEntries ?? Enumerable.Empty<RLogEntry>())
        .Where(l => 
            SearchableString(l).Contains(Search ?? "", StringComparison.CurrentCultureIgnoreCase) 
            && !SearchableString(l).Contains(Except ?? "", StringComparison.CurrentCultureIgnoreCase));
        ;

        return res;
    }
    public static string SearchableString(RLogEntry l)
    {
        return $"{l.Timestamp:yyyy-MM-dd HH:mm:ss} {l.Ip} {l.Msg} {l.UserAgent}";
    }
}
