@page "/tour/{TourId}"
@page "/tour/{TourId}/{path}"

@using TCWebAssembly.Data
@using TCalc.Domain
@using TCalc.Logic
@inject TourCalcDataService TcService

<h1><a href="some">link</a> tour</h1>
@if (!TcService.Initialized)
{
    <p><em>Service Initializing</em></p>
}
else
{
    @if (TcService.IsAuthorized)
    {
        @if (tlist == null)
        {
            <p><em>Tour @TourId Loading...</em></p>
        }
        else
        {
            <p>tour: @TourId  </p>
        }
    }
    else
    {
        if (!isLoggingIn)
        {
            <p>
                <em>Login</em>
                <EditForm Model="@loginModel" OnValidSubmit="@OnLogin">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <InputText id="scope" @bind-Value="loginModel.Scope" />
                    <InputText id="code" @bind-Value="loginModel.Code" />

                    <button type="submit">Submit</button>
                </EditForm>


            </p>
        }
        else
        {
            <p>Logging in... now</p>
        }
    }
}
@code {
    [Parameter]
    public string TourId { get; set; }
    [Parameter]
    public string Path { get; set; }


    TCalc.Domain.TourList tlist;
    protected override async Task OnInitializedAsync()
    {
        await TcService.Init();
        StateHasChanged();
        await LoadTours();
    }
    protected async Task LoadTours()
    {
        var tl = await TcService.GetTourList();
        var ts = tl.Tours.Select(t => new TourCalculator(t).SuggestFinalPayments());
        tl.Tours = ts;
        tlist = tl;
        StateHasChanged();
    }

    bool isLoggingIn = false;

    LoginModel loginModel = new LoginModel();
    private async void OnLogin()
    {
        isLoggingIn = true;
        await TcService.Login(loginModel.Scope, loginModel.Code);
        StateHasChanged();
        await LoadTours();
    }
}
