@page "/tourlist"

@using TCWebAssembly.Data
@using TCalc.Domain
@using TCalc.Logic
@inject TourCalcDataService TcService

<h1>List of Tours</h1>

@if (TcService.IsAuthorized)
{
@if (tlist == null)
{
    <p><em>Tours Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tour in tlist.Tours)
            {
                <tr>
                    <td><NavLink href="@{"tour/" + tour.GUID}">@tour.Name</NavLink>  </td>
                    <td>@tour.Spendings.Where(s => s.Planned).Count()</td>
                    <td>.</td>
                    <td>.</td>
                </tr>
                        }
        </tbody>
    </table>
                        }
                        } else
                        {
                            if (!isLoggingIn)
                            {
<p>
    <em>Login</em>
    <EditForm Model="@loginModel" OnValidSubmit="@OnLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputText id="scope" @bind-Value="loginModel.Scope" />
        <InputText id="code" @bind-Value="loginModel.Code" />

        <button type="submit">Submit</button>
    </EditForm>


</p>
                            }
                            else
                            {
                                <p>Logging in... @{isa();} now</p>
                            }
                        }

@code {
    TCalc.Domain.TourList tlist;
    protected override async Task OnInitializedAsync()
    {
        await TcService.InitToken();
        await LoadTours();
    }
    private string isa()
    {
        return TcService.IsAuthorized ? "true" : "false";
    }
    protected async Task LoadTours()
    {
        var tl = await TcService.GetTourList();
        var ts = tl.Tours.Select(t => new TourCalculator(t).SuggestFinalPayments());
        tl.Tours = ts;
        tlist = tl;
        StateHasChanged();
    }

    bool isLoggingIn = false;

    LoginModel loginModel = new LoginModel();
    private async void OnLogin()
    {
        isLoggingIn = true;
        await TcService.Login(loginModel.Scope, loginModel.Code);
        StateHasChanged();
        await LoadTours();
    }
}
